{
  "swagger": "2.0",
  "info": {
    "title": "Starmind",
    "description": "The Starmind Connector enables seamless integration with Starmind's knowledge engine, allowing users to access verified answers and expert insights across their organisation. By connecting to Starmind, your workflows and agents can intelligently retrieve responses to business-critical questions, surface expert knowledge, and streamline decision-making processes.",
    "version": "1.0",
    "contact": {
      "name": "Starmind technical support experts are ready to listen and help",
      "url": "https://starmind.atlassian.net/servicedesk/customer/portal/2",
      "email": "product@starmind.com"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://starmind.ai"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.starmind.ai/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Productivity;Collaboration"
    }
  ],
  "host": "yournetwork.starmind.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/questions": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "_links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "href"
                        }
                      },
                      "description": "self"
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "href"
                        }
                      },
                      "description": "next"
                    },
                    "last": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "href"
                        }
                      },
                      "description": "last"
                    }
                  },
                  "description": "_links"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Question"
                  },
                  "description": "Results of the question search"
                },
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "total"
                }
              }
            }
          }
        },
        "summary": "Find questions",
        "operationId": "FindQuestion",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The question search query",
            "x-ms-summary": "Search query for questions",
            "x-ms-visibility": "important"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Limit the number of returned questions. Defaults to 10.",
            "x-ms-summary": "Maximum number of questions to return",
            "x-ms-visibility": "important"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-visibility": "important",
            "description": "Filter the list of questions using a predefined filter.",
            "x-ms-summary": "Predefined filter for questions",
            "enum": [
              "solved",
              "unsolved",
              "my-questions",
              "my-solutions",
              "flagged",
              "following",
              "trending",
              "accepted",
              "verified"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify the criteria the result is sorted by",
            "x-ms-summary": "Sort criteria for questions",
            "enum": [
              "last_activity.desc",
              "last_activity.asc",
              "solution_count.desc",
              "solution_count.asc",
              "date_published.desc",
              "date_published.asc",
              "view_count.desc",
              "view_count.asc",
              "id.desc",
              "id.asc",
              "interest.desc",
              "interest.asc",
              "activity_and_interest.desc",
              "activity_and_interest.asc"
            ],
            "x-ms-visibility": "important"
          }
        ],
        "description": "Finds questions based on the provided query parameters.",
        "x-ms-openai-data": {
          "openai-enabled": true,
          "operations": [
            {
              "operationId": "FindQuestion",
              "x-ms-require-user-confirmation": false,
              "parameters": [
                {
                  "name": "query",
                  "type": "upsert",
                  "properties": [
                    {
                      "name": "required",
                      "value": false,
                      "type": "upsert"
                    },
                    {
                      "name": "x-ms-explicit-input",
                      "value": false,
                      "type": "upsert"
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "post": {
        "summary": "Create a question draft",
        "description": "Creates a new question draft.",
        "operationId": "PostQuestion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "question title, Between 10 and 100 characters.",
                  "title": "",
                  "x-ms-visibility": "important"
                },
                "description": {
                  "type": "string",
                  "description": "Question description providing detailed context and information about the question"
                },
                "language": {
                  "type": "string",
                  "description": "The question language will be detected automatically based on the title and description text. Providing a language explicitly is usually not necessary, and only helps in cases where the automatic language detection is not able to detect the language unambiguously",
                  "title": "",
                  "x-ms-visibility": "advanced"
                },
                "knowledge_space": {
                  "type": "string",
                  "description": "the id of the knowledge space to assign the question to",
                  "title": "",
                  "x-ms-visibility": "advanced"
                }
              },
              "x-ms-visibility": "important",
              "required": [
                "title"
              ]
            },
            "x-ms-visibility": "important"
          }
        ],
        "responses": {
          "200": {
            "description": "Question draft created, successfully",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-openai-data": {
          "openai-enabled": true,
          "operations": [
            {
              "operationId": "PostQuestion",
              "x-ms-require-user-confirmation": false
            }
          ]
        }
      }
    },
    "/api/v1/questions/{questionId}/publish": {
      "put": {
        "responses": {
          "200": {
            "description": "The number of experts notified for the published question",
            "schema": {
              "type": "object",
              "properties": {
                "number_of_experts": {
                  "type": "integer",
                  "format": "int32",
                  "description": "number_of_experts"
                }
              }
            }
          }
        },
        "summary": "Publish a question",
        "description": "Publishes question draft",
        "operationId": "PublishQuestion",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-ms-summary": "ID of the question to publish",
            "description": "The ID of the question draft to be published",
            "x-ms-url-encoding": "single"
          }
        ],
        "x-ms-openai-data": {
          "openai-enabled": true,
          "operations": [
            {
              "operationId": "PublishQuestion",
              "x-ms-require-user-confirmation": true
            }
          ]
        }
      }
    },
    "/api/v1/questions/{questionId}/complete": {
      "get": {
        "summary": "Get complete question details",
        "description": "Retrieves the complete details for a specific question, including solutions, comments, and concepts.",
        "operationId": "GetQuestion",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the question to retrieve",
            "x-ms-summary": "ID of the question",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          }
        ],
        "responses": {
          "200": {
            "description": "Complete question details",
            "schema": {
              "$ref": "#/definitions/QuestionComplete"
            }
          }
        },
        "x-ms-openai-data": {
          "openai-enabled": true,
          "operations": [
            {
              "operationId": "GetQuestion",
              "x-ms-require-user-confirmation": true
            }
          ]
        }
      }
    },
    "/api/v2/learning/experts/search": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "experts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "global_user_id": {
                        "type": "string",
                        "description": "global_user_id",
                        "title": "",
                        "x-ms-visibility": "important"
                      },
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "score"
                      },
                      "concept_scores": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "score": {
                              "type": "number",
                              "format": "float",
                              "description": "score"
                            },
                            "concept": {
                              "type": "object",
                              "properties": {
                                "concept_id": {
                                  "type": "string",
                                  "description": "concept_id"
                                },
                                "labels_for_languages": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "language": {
                                        "type": "string",
                                        "description": "language"
                                      },
                                      "primary_label": {
                                        "type": "string",
                                        "description": "primary_label"
                                      },
                                      "labels": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "labels"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "description"
                                      },
                                      "description_type": {
                                        "type": "string",
                                        "description": "description_type"
                                      }
                                    }
                                  },
                                  "description": "labels_for_languages"
                                }
                              },
                              "description": "concept"
                            }
                          }
                        },
                        "description": "Expert search concept matches including scores"
                      }
                    }
                  },
                  "description": "experts"
                },
                "label_matches": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ConceptLabelMatch"
                  },
                  "description": "The matched labels for the expert search query"
                }
              }
            }
          }
        },
        "summary": "Find experts",
        "description": "Finds experts based on the provided context",
        "operationId": "FindExpert",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "text_query": {
                  "type": "string",
                  "description": "The text query to search for experts. This can be a question or a topic of interest.",
                  "title": "",
                  "x-ms-visibility": "important"
                }
              },
              "required": [
                "text_query"
              ],
              "x-ms-visibility": "important"
            },
            "x-ms-visibility": "important"
          }
        ],
        "x-ms-openai-data": {
          "openai-enabled": false,
          "operations": [
            {
              "operationId": "FindExpert",
              "x-ms-require-user-confirmation": true
            }
          ]
        }
      }
    },
    "/accounts/api/v1/graphql": {
      "post": {
        "responses": {
          "200": {
            "description": "Returns the user object for the specified globalUserId.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/definitions/User"
                    }
                  },
                  "description": "data"
                }
              }
            }
          }
        },
        "summary": "Find user by id",
        "description": "Resolves the globalUserId to user object",
        "operationId": "ResolveUser",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "description": "query",
                  "example": "query getUser($globalUserId: UUID!) { user(globalUserId: $globalUserId) { globalUserId firstname lastname email languageId avatarUrl company department position location about countryId created dateDeleted isFederated } }"
                },
                "variables": {
                  "type": "object",
                  "properties": {
                    "globalUserId": {
                      "type": "string",
                      "description": "globalUserId"
                    }
                  },
                  "description": "variables"
                }
              }
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "Question": {
      "type": "object",
      "properties": {
        "knowledge_space_id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique knowledge space id to which the question belongs."
        },
        "upvote_count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of upvotes the question has received."
        },
        "view_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times the question has been viewed by users."
        },
        "published": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Published date",
          "description": "Timestamp indicating when the question was published (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "is_deleted": {
          "type": "boolean",
          "description": "Indicates if the question is deleted. Deleted questions are not visible to users, but can still be accessed by the administrators."
        },
        "title": {
          "type": "string",
          "description": "The question title"
        },
        "last_activity": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Last activity date",
          "description": "Timestamp indicating the last activity with the question (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "is_published": {
          "type": "boolean",
          "description": "The question is_published flag indicates whether the question is published or not. A published solution is visible to all users, while an unpublished solution is in draft state only visible to the author."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Created date",
          "description": "Timestamp indicating when the question was created (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "description": {
          "type": "string",
          "description": "Question description providing detailed context and information about the question"
        },
        "solution_count": {
          "type": "integer",
          "format": "int32",
          "description": "This is the number of solutions that have been provided for this question."
        },
        "content_updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Content updated date",
          "description": "Timestamp indicating when the question's content or attachments were last updated (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique question id"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "question updated date",
          "description": "Last time the resource has been updated in the DB. This date does not reflect content updates but any update to any fields of the record. Use content_updated for information about content updates."
        },
        "language": {
          "type": "string",
          "description": "The question language"
        }
      }
    },
    "QuestionComplete": {
      "allOf": [
        {
          "$ref": "#/definitions/Question"
        },
        {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "description": "source"
            },
            "concepts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConceptLabelMatch"
              },
              "description": "The assigned question concepts"
            },
            "knowledge_space": {
              "$ref": "#/definitions/KnowledgeSpace",
              "description": "The assigned question knowledge space"
            },
            "solutions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Solution"
              },
              "description": "The question solutions"
            },
            "attachments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              },
              "description": "The question attachments"
            },
            "comments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              },
              "description": "The question comments"
            }
          }
        }
      ]
    },
    "ConceptLabelMatch": {
      "type": "object",
      "properties": {
        "concept_id": {
          "type": "string",
          "description": "The unique concept id"
        },
        "description": {
          "type": "string",
          "description": "The concept description"
        },
        "is_flat": {
          "type": "boolean",
          "description": "is_flat"
        },
        "label_match": {
          "type": "string",
          "description": "The label that matched the concept"
        },
        "language": {
          "type": "string",
          "description": "Concept language"
        },
        "ontology_id": {
          "type": "string",
          "description": "The unique ontology id to which the concept belongs"
        },
        "primary_label": {
          "type": "string",
          "description": "Concept primary label"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Created date",
          "description": "Timestamp indicating when the attachment was created (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "hash": {
          "type": "string",
          "description": "The attachment hash"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the unique attachment id"
        },
        "link": {
          "type": "string",
          "description": "The relative url to the attachment resource"
        },
        "mime_type": {
          "type": "string",
          "description": "The attachment file mime_type"
        },
        "name": {
          "type": "string",
          "description": "The attachment file name"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The attachment file size"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "content_updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Content updated date",
          "description": "Timestamp indicating when the comment's description was last updated (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Created date",
          "description": "Timestamp indicating when the comment was created (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "description": {
          "type": "string",
          "description": "This is the main text of the comment that provides additional information or context to the question or solution."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique comment id"
        },
        "language": {
          "type": "string",
          "description": "The comment language"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "comment updated date",
          "description": "Last time the resource has been updated in the DB. This date does not reflect content updates but any update to any fields of the record. Use content_updated for information about content updates."
        },
        "upvote_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of upvotes the comment has received."
        },
        "user": {
          "$ref": "#/definitions/UserLegacy"
        }
      }
    },
    "Solution": {
      "type": "object",
      "properties": {
        "accepted_by_question_poser": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Solution accepted date",
          "description": "Timestamp indicating whether the solution has been accepted by the question poser (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "description": "The solution attachments"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          },
          "description": "The solution comments"
        },
        "content_updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Content updated date",
          "description": "Timestamp indicating when the solution's content was last updated (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Created date",
          "description": "Timestamp indicating when the solution was created (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "description": {
          "type": "string",
          "description": "This is the main text of the solution that provides the answer or guidance to the question posed."
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Expires date",
          "description": "Timestamp indicating when the solution is about to expiry and requires revalidation (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the unique solution id"
        },
        "is_published": {
          "type": "boolean",
          "description": "The solution is_published flag indicates whether the solution is published or not. A published solution is visible to all users."
        },
        "language": {
          "type": "string",
          "description": "The solution language"
        },
        "published": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Published date",
          "description": "Timestamp indicating when the solution was published (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "rating_count": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of ratings for the solution."
        },
        "solution_authority_approval": {
          "$ref": "#/definitions/SolutionAuthorityApproval"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "solution updated date",
          "description": "Last time the resource has been updated in the DB. This date does not reflect content updates but any update to any fields of the record. Use content_updated for information about content updates."
        },
        "upvote_count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of upvotes the solution has received."
        },
        "user": {
          "$ref": "#/definitions/UserLegacy",
          "description": "The user who created the solution"
        },
        "validated": {
          "$ref": "#/definitions/SolutionValidation"
        },
        "validity_period": {
          "type": "string",
          "description": "Validity period until the solution is considered expired"
        }
      }
    },
    "SolutionValidation": {
      "type": "object",
      "properties": {
        "revalidatedAt": {
          "type": "string",
          "description": "The date when the solution was revalidated"
        },
        "validityPeriod": {
          "type": "string",
          "description": "The validity period until the solution is considered expired"
        },
        "user": {
          "$ref": "#/definitions/UserLegacy",
          "description": "The user who validated the solution"
        }
      },
      "description": "solution validation object containing information about the validation status of the solution"
    },
    "SolutionAuthorityApproval": {
      "type": "object",
      "properties": {
        "approval_date": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Approval date",
          "description": "Date of the solution authority approval (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "solution_authority_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the solution authority"
        },
        "solution_authority_name": {
          "type": "string",
          "description": "Name of the solution authority"
        },
        "user": {
          "$ref": "#/definitions/UserLegacy"
        }
      },
      "description": "Information about solution authority approval"
    },
    "User": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "location"
        },
        "email": {
          "type": "string",
          "description": "email"
        },
        "avatarUrl": {
          "type": "string",
          "description": "avatarUrl"
        },
        "firstname": {
          "type": "string",
          "description": "firstname"
        },
        "lastname": {
          "type": "string",
          "description": "lastname"
        },
        "countryId": {
          "type": "string",
          "description": "countryId"
        },
        "globalUserId": {
          "type": "string",
          "description": "globalUserId"
        },
        "position": {
          "type": "string",
          "description": "position"
        },
        "company": {
          "type": "string",
          "description": "company"
        },
        "department": {
          "type": "string",
          "description": "department"
        }
      },
      "description": "user object containing user information"
    },
    "UserLegacy": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "email"
        },
        "globalUserId": {
          "type": "string",
          "description": "global_user_id"
        },
        "image": {
          "type": "string",
          "description": "image"
        },
        "firstname": {
          "type": "string",
          "description": "firstname"
        },
        "lastname": {
          "type": "string",
          "description": "lastname"
        }
      },
      "description": "user object containing user information"
    },
    "KnowledgeSpace": {
      "type": "object",
      "properties": {
        "automatic_new_user_assignment": {
          "type": "boolean",
          "description": "Indicates if new users are automatically assigned"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Created date",
          "description": "Timestamp indicating when the knowledge space was created (yyyy-MM-ddTHH:mm:ss.fffZ)"
        },
        "description": {
          "type": "string",
          "description": "Description of the knowledge space"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique knowledge space id"
        },
        "is_closed": {
          "type": "boolean",
          "description": "Indicates if the knowledge space is non public"
        },
        "member_count": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members"
        },
        "name": {
          "type": "string",
          "description": "Name of the knowledge space"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "knowledge space updated date",
          "description": "Last time the resource has been updated in the DB."
        }
      },
      "description": "The knowledge space object containing information about the knowledge space"
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [],
  "x-ms-capabilities": {
    "testConnection": {
      "operationId": "FindQuestion",
      "parameters": {
        "limit": 1
      }
    }
  },
  "x-ms-openai-manifest": {
    "humanName": "Starmind",
    "modelDescription": "Search for questions and answers (Q&A) in the internal Starmind knowledge network. This data source contains highly trustworthy solutions authored by subject matter experts. By default, results are sorted by relevance. The data source provided by Starmind is meticulously verified by experts for reliability and continuously updated to ensure accuracy and timeliness. Answers are rated from 1 to 5 stars, with 4 to 5 stars indicating a very high-quality solution. In addition, access the Starmind knowledge engine to find experts based on their expertise and contributions. The Starmind Connector enables seamless integration with Starmind's knowledge engine, allowing users to connect with experts across their organisation.",
    "contactEmail": "product@starmind.com",
    "legalUrl": "https://www.starmind.ai/terms-of-use"
  }
}

