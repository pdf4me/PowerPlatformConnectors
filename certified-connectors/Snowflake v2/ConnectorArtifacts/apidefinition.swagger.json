{
  "swagger": "2.0",
  "info": {
    "version": "1.1",
    "title": "Snowflake",
    "description": "Snowflake Connector allows you to build canvas apps and surface Snowflake data in Virtual Tables, while also enabling faster data processing and analytics compared to traditional solutions.",
    "x-ms-api-annotation": {
      "status": "Preview"
    },
    "x-ms-keywords": [
      "snowflake"
    ]
  },
  "host": "localhost:56800",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/$metadata.json/datasets": {
      "get": {
        "tags": [
          "SnowflakeDataSetsMetadata"
        ],
        "operationId": "GetDataSetsMetadata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSetsMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/$metadata.json/datasets/{server},{database}/tables/{table}": {
      "get": {
        "tags": [
          "SnowflakeTableMetadata"
        ],
        "summary": "Get metadata of a table",
        "description": "Get metadata of a table.",
        "operationId": "SnowflakeTableMetadata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of Snowflake host",
            "required": true,
            "x-ms-summary": "Server name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "x-ms-summary": "Database name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "table",
            "in": "path",
            "description": "table name.",
            "required": true,
            "x-ms-summary": "Table name",
            "x-ms-url-encoding": "double",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/datasets": {
      "get": {
        "tags": [
          "SnowflakeDataSet"
        ],
        "summary": "Get datasets",
        "description": "This operation gets datasets.",
        "operationId": "GetDataSets",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSetsList"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/datasets/{server},{database}/tables/{table}/items": {
      "get": {
        "tags": [
          "SnowflakeTableData"
        ],
        "operationId": "ODataStyleGetItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of snowflake server",
            "required": true,
            "x-ms-summary": "Server name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "x-ms-summary": "Database name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "table",
            "in": "path",
            "description": "Name of Snowflake table",
            "required": true,
            "x-ms-summary": "Table name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "A sequence of OData aggregation transformations",
            "required": false,
            "x-ms-summary": "Aggregation transformation",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An ODATA filter query to restrict the entries returned (e.g. stringColumn eq 'string' OR numberColumn lt 123).",
            "required": false,
            "x-ms-summary": "Filter Query",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "An ODATA orderBy query for specifying the order of entries.",
            "required": false,
            "x-ms-summary": "Order By",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entries to skip (default = 0).",
            "required": false,
            "x-ms-summary": "Skip Count",
            "x-ms-visibility": "advanced",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Total number of entries to retrieve (default = all).",
            "required": false,
            "x-ms-summary": "Top Count",
            "x-ms-visibility": "advanced",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specific fields to retrieve from entries (default = all).",
            "required": false,
            "x-ms-summary": "Select Query",
            "x-ms-visibility": "advanced",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ItemsList"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      },
      "post": {
        "tags": [
          "SnowflakeTableData"
        ],
        "summary": "Create record",
        "description": "This operation creates a record and allows null values.",
        "operationId": "ODataStylePostItem_V2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of snowflake server",
            "required": true,
            "x-ms-summary": "Server name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "x-ms-summary": "Database name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "table",
            "in": "path",
            "description": "table name",
            "required": true,
            "x-ms-summary": "table name",
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "description": "Record",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            },
            "x-ms-summary": "Record"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal",
        "x-ms-api-annotation": {
          "status": "Production",
          "family": "ODataStylePostItem",
          "revision": 2
        }
      }
    },
    "/datasets/{server},{database}/tables/{table}/items/{id}": {
      "get": {
        "tags": [
          "SnowflakeTableData"
        ],
        "summary": "Get row",
        "description": "This operation gets a row from a table.",
        "operationId": "GetItem",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of snowflake server",
            "required": true,
            "x-ms-summary": "Server name",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "x-ms-summary": "Database name",
            "type": "string"
          },
          {
            "name": "table",
            "in": "path",
            "description": "Name of Snowflake table",
            "required": true,
            "x-ms-summary": "Table name",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "item key",
            "required": true,
            "x-ms-summary": "item key",
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specific fields to retrieve from entries (default = all).",
            "required": false,
            "x-ms-summary": "Select Query",
            "x-ms-visibility": "advanced",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal",
        "x-ms-api-annotation": {
          "status": "Production",
          "family": "ODataStyleGetItem",
          "revision": 2
        }
      },
      "delete": {
        "tags": [
          "SnowflakeTableData"
        ],
        "operationId": "DeleteItem",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of snowflake server",
            "required": true,
            "x-ms-summary": "Server name",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "x-ms-summary": "Database name",
            "type": "string"
          },
          {
            "name": "table",
            "in": "path",
            "description": "Name of Snowflake table",
            "required": true,
            "x-ms-summary": "Table name",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      },
      "patch": {
        "tags": [
          "SnowflakeTableData"
        ],
        "summary": "Patches a specific item in the table",
        "description": "Patches a specific item in the table",
        "operationId": "PatchItem",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of snowflake server",
            "required": true,
            "x-ms-summary": "Server name",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "x-ms-summary": "Database name",
            "type": "string"
          },
          {
            "name": "table",
            "in": "path",
            "description": "Name of Snowflake table",
            "required": true,
            "x-ms-summary": "Table name",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "item key",
            "required": true,
            "x-ms-summary": "item key",
            "type": "string"
          },
          {
            "name": "item",
            "in": "body",
            "description": "item to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            },
            "x-ms-summary": "item to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/datasets/{server},{database}/tables": {
      "get": {
        "tags": [
          "SnowflakeTable"
        ],
        "summary": "Get object types",
        "description": "This operation lists the available Snowflake object types.",
        "operationId": "GetTables",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "Name of SQL server",
            "required": true,
            "x-ms-summary": "Server name",
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "x-ms-summary": "Database name",
            "x-ms-url-encoding": "double",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TablesList"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal",
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        }
      }
    },
    "/testconnection": {
      "get": {
        "tags": [
          "SnowflakeDiagnostic"
        ],
        "operationId": "TestConnection",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/sql": {
      "post": {
        "tags": [
          "Snowflake SQL"
        ],
        "summary": "Submit SQL Statement for Execution",
        "description": "Submit a SQL Statement for Execution",
        "operationId": "ExecuteSqlStatement",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Instance",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "The uri of your Snowflake instance (without https://)",
            "x-ms-visibility": "important",
            "x-ms-summary": "Instance"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "default": "application/json",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "x-ms-summary": "Content-Type"
          },
          {
            "name": "Accept",
            "in": "header",
            "default": "application/json",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "x-ms-summary": "Accept"
          },
          {
            "name": "requestId",
            "in": "query",
            "type": "string",
            "required": false,
            "x-ms-visibility": "advanced",
            "x-ms-summary": "Request ID",
            "description": "The ID of the Request"
          },
          {
            "name": "asyncexecution",
            "in": "query",
            "type": "boolean",
            "default": false,
            "x-ms-visibility": "advanced",
            "x-ms-summary": "Asynchronous",
            "description": "Indicates if the query should be executed asynchronously"
          },
          {
            "name": "nullable",
            "in": "query",
            "type": "boolean",
            "default": false,
            "x-ms-visibility": "advanced",
            "x-ms-summary": "Nullable",
            "description": "If nullable is false, null values will be replaced by string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "statement": {
                  "type": "string",
                  "description": "The SQL statement to be executed - batches of statements not yet supported"
                },
                "timeout": {
                  "type": "integer",
                  "default": 60,
                  "x-ms-visibility": "advanced",
                  "x-ms-summary": "timeout",
                  "description": "Number of seconds before timeout occurs"
                },
                "database": {
                  "type": "string",
                  "description": "database",
                  "x-ms-summary": "database"
                },
                "schema": {
                  "type": "string",
                  "description": "schema",
                  "x-ms-summary": "schema"
                },
                "warehouse": {
                  "type": "string",
                  "description": "warehouse",
                  "x-ms-summary": "warehouse"
                },
                "role": {
                  "type": "string",
                  "description": "role",
                  "x-ms-summary": "role"
                },
                "bindings": {
                  "description": "Values of bind variables in the SQL statement. When executing the statement, Snowflake replaces placeholders ('?' and ':name') in the statement with these specified values.",
                  "type": "object",
                  "properties": {},
                  "x-ms-visibility": "advanced",
                  "x-ms-summary": "bindings"
                },
                "parameters": {
                  "description": "Session parameters that should be set before executing the statement.",
                  "type": "object",
                  "properties": {
                    "timezone": {
                      "description": "Time zone to use when executing the statement.",
                      "type": "string",
                      "example": "america/los_angeles",
                      "x-ms-summary": "timezone"
                    },
                    "query_tag": {
                      "description": "Query tag that you want to associate with the SQL statement.",
                      "type": "string",
                      "example": "tag-1234",
                      "x-ms-summary": "query tag"
                    },
                    "binary_output_format": {
                      "description": "Output format for binary values.",
                      "type": "string",
                      "example": "HEX",
                      "x-ms-summary": "binary output format"
                    },
                    "date_output_format": {
                      "description": "Output format for DATE values.",
                      "type": "string",
                      "example": "YYYY-MM-DD",
                      "x-ms-summary": "date output format"
                    },
                    "time_output_format": {
                      "description": "Output format for TIME values.",
                      "type": "string",
                      "example": "HH24:MI:SS.FF6",
                      "x-ms-summary": "time output format"
                    },
                    "timestamp_output_format": {
                      "description": "Output format for TIMESTAMP values.",
                      "type": "string",
                      "example": "YYYY-MM-DDTHH24:MI:SS.FF6",
                      "x-ms-summary": "timestamp output format"
                    },
                    "timestamp_ltz_output_format": {
                      "description": "Output format for TIMESTAMP_LTZ values.",
                      "type": "string",
                      "example": "YYYY-MM-DDTHH24:MI:SS.FF6",
                      "x-ms-summary": "timestamp ltz output format"
                    },
                    "timestamp_ntz_output_format": {
                      "description": "Output format for TIMESTAMP_NTZ values.",
                      "type": "string",
                      "example": "YYYY-MM-DDTHH24:MI:SS.FF6"
                    },
                    "timestamp_tz_output_format": {
                      "description": "Output format for TIMESTAMP_TZ values.",
                      "type": "string",
                      "example": "YYYY-MM-DDTHH24:MI:SS.FF6 TZHTZM",
                      "x-ms-summary": "timestamp tz output format"
                    },
                    "MULTI_STATEMENT_COUNT": {
                      "description": "Number of statements to execute when using multi-statement capability. 0 implies variable number of statements. Negative numbers are not allowed.",
                      "type": "integer",
                      "example": 4,
                      "default": 1,
                      "x-ms-summary": "multi statement count"
                    }
                  },
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The statement was executed successfully, and the response includes any data requested.",
            "x-ms-summary": "Message",
            "schema": {
              "type": "object",
              "properties": {
                "Partitions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "RowCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "RowCount"
                      },
                      "UncompressedSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "UncompressedSize"
                      },
                      "CompressedSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "CompressedSize"
                      }
                    }
                  },
                  "description": "Partitions"
                },
                "Schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "database": {
                        "type": "string",
                        "description": "database"
                      },
                      "schema": {
                        "type": "string",
                        "description": "schema"
                      },
                      "table": {
                        "type": "string",
                        "description": "table"
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "nullable"
                      },
                      "precision": {
                        "type": "integer",
                        "format": "int32",
                        "description": "precision"
                      },
                      "scale": {
                        "type": "integer",
                        "format": "int32",
                        "description": "scale"
                      },
                      "byteLength": {
                        "type": "integer",
                        "description": "byteLength"
                      },
                      "collation": {
                        "type": "string",
                        "description": "collation"
                      },
                      "length": {
                        "type": "integer",
                        "description": "length"
                      },
                      "type": {
                        "type": "string",
                        "description": "type"
                      }
                    }
                  },
                  "description": "Schema"
                },
                "Data": {
                  "type": "array",
                  "items": {},
                  "description": "Data"
                },
                "Metadata": {
                  "type": "object",
                  "properties": {
                    "Rows": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Rows"
                    },
                    "Format": {
                      "type": "string",
                      "description": "Format"
                    },
                    "Code": {
                      "type": "string",
                      "description": "Code"
                    },
                    "StatementStatusUrl": {
                      "type": "string",
                      "description": "StatementStatusUrl"
                    },
                    "RequestId": {
                      "type": "string",
                      "description": "RequestId"
                    },
                    "SqlState": {
                      "type": "string",
                      "description": "SqlState"
                    },
                    "StatementHandle": {
                      "type": "string",
                      "description": "StatementHandle"
                    },
                    "StatementHandles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "StatementHandles from executing multiple statements"
                    },
                    "CreatedOn": {
                      "type": "string",
                      "description": "CreatedOn"
                    }
                  },
                  "description": "Metadata"
                }
              }
            }
          },
          "202": {
            "description": "The execution of the statement is still in progress. Use this method again to check the status of the statement execution.",
            "schema": {
              "type": "object",
              "properties": {
                "Metadata": {
                  "type": "object",
                  "properties": {
                    "Rows": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Rows"
                    },
                    "Format": {
                      "type": "string",
                      "description": "Format"
                    },
                    "Code": {
                      "type": "string",
                      "description": "Code"
                    },
                    "StatementStatusUrl": {
                      "type": "string",
                      "description": "StatementStatusUrl"
                    },
                    "RequestId": {
                      "type": "string",
                      "description": "RequestId"
                    },
                    "SqlState": {
                      "type": "string",
                      "description": "SqlState"
                    },
                    "CreatedOn": {
                      "type": "string",
                      "description": "CreatedOn"
                    },
                    "Message": {
                      "type": "string",
                      "description": "Message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request payload is invalid or malformed.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "401": {
            "description": "Unauthorized. The request is not authorized.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The request endpoint is not valid.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed. The request method doesn't match the supported API.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "408": {
            "description": "The execution of the statement exceeded the timeout period. The execution of the statement was cancelled.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                },
                "code": {
                  "type": "string",
                  "example": "000123"
                },
                "sqlState": {
                  "type": "string",
                  "example": "42601"
                },
                "message": {
                  "type": "string",
                  "example": "successfully executed"
                },
                "createdOn": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Timestamp that specifies when the statement execution started. The timestamp is expressed in milliseconds since the epoch",
                  "example": 1597090533987
                },
                "statementStatusUrl": {
                  "type": "string",
                  "example": "/api/v2/statements/GUID value"
                }
              }
            }
          },
          "415": {
            "description": "The request header Content-Type includes unsupported media type. The API supports application/json only.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "422": {
            "description": "The execution of the statement exceeded the timeout period. The execution of the statement was cancelled.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                },
                "code": {
                  "type": "string",
                  "example": "000123"
                },
                "sqlState": {
                  "type": "string",
                  "example": "42601"
                },
                "message": {
                  "type": "string",
                  "example": "successfully executed"
                },
                "createdOn": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Timestamp that specifies when the statement execution started. The timestamp is expressed in milliseconds since the epoch",
                  "example": 1597090533987
                },
                "statementStatusUrl": {
                  "type": "string",
                  "example": "/api/v2/statements/GUID value"
                }
              }
            }
          },
          "429": {
            "description": "Limit Exceeded. The number of requests hit the rate limit.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. The server hits an unrecoverable system error.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable. The request was not processed due to server side timeouts.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout. The request was not processed due to server side timeouts.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          }
        }
      }
    },
    "/sql/{statementHandle}": {
      "post": {
        "tags": [
          "Snowflake SQL"
        ],
        "summary": "Check the Status and Get Results",
        "description": "Check the Status of the Execution of a Statement and Get the Results",
        "operationId": "GetResults",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "Instance",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "The uri of your Snowflake instance (without https://)",
            "x-ms-visibility": "important",
            "x-ms-summary": "Instance"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "default": "application/json",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "description": "Content-Type",
            "x-ms-summary": "Content Type"
          },
          {
            "name": "Accept",
            "in": "header",
            "default": "application/json",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "description": "Accept",
            "x-ms-summary": "Accept"
          },
          {
            "name": "statementHandle",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "statement handle",
            "x-ms-summary": "statement handle",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "requestId",
            "in": "query",
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "Request ID",
            "x-ms-summary": "Request ID"
          },
          {
            "name": "partition",
            "in": "query",
            "type": "integer",
            "description": "partition",
            "x-ms-summary": "partition"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "DataSchema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "database": {
                        "type": "string",
                        "description": "database"
                      },
                      "schema": {
                        "type": "string",
                        "description": "schema"
                      },
                      "table": {
                        "type": "string",
                        "description": "table"
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "nullable"
                      },
                      "precision": {
                        "type": "integer",
                        "format": "int32",
                        "description": "precision"
                      },
                      "scale": {
                        "type": "integer",
                        "format": "int32",
                        "description": "scale"
                      },
                      "byteLength": {
                        "type": "integer",
                        "description": "byteLength"
                      },
                      "collation": {
                        "type": "string",
                        "description": "collation"
                      },
                      "length": {
                        "type": "integer",
                        "description": "length"
                      },
                      "type": {
                        "type": "string",
                        "description": "type"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "x-ms-summary": "Message",
            "schema": {
              "type": "object",
              "properties": {
                "Partitions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "RowCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "RowCount"
                      },
                      "UncompressedSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "UncompressedSize"
                      },
                      "CompressedSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "CompressedSize"
                      }
                    }
                  },
                  "description": "Partitions"
                },
                "Schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "database": {
                        "type": "string",
                        "description": "database"
                      },
                      "schema": {
                        "type": "string",
                        "description": "schema"
                      },
                      "table": {
                        "type": "string",
                        "description": "table"
                      },
                      "precision": {
                        "type": "integer",
                        "description": "precision"
                      },
                      "scale": {
                        "type": "integer",
                        "description": "scale"
                      },
                      "type": {
                        "type": "string",
                        "description": "type"
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "nullable"
                      },
                      "byteLength": {
                        "type": "integer",
                        "format": "int32",
                        "description": "byteLength"
                      },
                      "collation": {
                        "type": "string",
                        "description": "collation"
                      },
                      "length": {
                        "type": "integer",
                        "format": "int32",
                        "description": "length"
                      }
                    }
                  },
                  "description": "Schema"
                },
                "Data": {
                  "type": "array",
                  "items": {},
                  "description": "Data"
                },
                "StatementHandle": {
                  "type": "string",
                  "description": "StatementHandle"
                },
                "Metadata": {
                  "type": "object",
                  "properties": {
                    "Rows": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Rows"
                    },
                    "Format": {
                      "type": "string",
                      "description": "Format"
                    },
                    "Code": {
                      "type": "string",
                      "description": "Code"
                    },
                    "StatementStatusUrl": {
                      "type": "string",
                      "description": "StatementStatusUrl"
                    },
                    "RequestId": {
                      "type": "string",
                      "description": "RequestId"
                    },
                    "SqlState": {
                      "type": "string",
                      "description": "SqlState"
                    },
                    "CreatedOn": {
                      "type": "string",
                      "description": "CreatedOn"
                    },
                    "StatementHandles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "StatementHandles from executing multiple statements"
                    }
                  },
                  "description": "Metadata"
                }
              }
            }
          },
          "202": {
            "description": "The execution of the statement is still in progress. Use this method again to check the status of the statement execution.",
            "schema": {
              "type": "object",
              "properties": {
                "Metadata": {
                  "type": "object",
                  "properties": {
                    "Rows": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Rows"
                    },
                    "Format": {
                      "type": "string",
                      "description": "Format"
                    },
                    "Code": {
                      "type": "string",
                      "description": "Code"
                    },
                    "StatementStatusUrl": {
                      "type": "string",
                      "description": "StatementStatusUrl"
                    },
                    "RequestId": {
                      "type": "string",
                      "description": "RequestId"
                    },
                    "SqlState": {
                      "type": "string",
                      "description": "SqlState"
                    },
                    "CreatedOn": {
                      "type": "string",
                      "description": "CreatedOn"
                    },
                    "Message": {
                      "type": "string",
                      "description": "Message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request payload is invalid or malformed.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "401": {
            "description": "Unauthorized. The request is not authorized.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The request endpoint is not valid.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed. The request method doesn't match the supported API.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "415": {
            "description": "The request header Content-Type includes unsupported media type. The API supports application/json only.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "422": {
            "description": "The execution of the statement exceeded the timeout period. The execution of the statement was cancelled.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                },
                "code": {
                  "type": "string",
                  "example": "000123"
                },
                "sqlState": {
                  "type": "string",
                  "example": "42601"
                },
                "message": {
                  "type": "string",
                  "example": "successfully executed"
                },
                "createdOn": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Timestamp that specifies when the statement execution started. The timestamp is expressed in milliseconds since the epoch",
                  "example": 1597090533987
                },
                "statementStatusUrl": {
                  "type": "string",
                  "example": "/api/v2/statements/GUID value"
                }
              }
            }
          },
          "429": {
            "description": "Limit Exceeded. The number of requests hit the rate limit.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. The server hits an unrecoverable system error.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable. The request was not processed due to server side timeouts.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout. The request was not processed due to server side timeouts.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          }
        }
      }
    },
    "/sql/{statementHandle}/cancel": {
      "post": {
        "summary": "Cancel the Execution of a Statement",
        "description": "Cancel the Execution of a Statement",
        "operationId": "Cancel",
        "tags": [
          "Snowflake SQL"
        ],
        "parameters": [
          {
            "name": "Instance",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "The uri of your Snowflake instance (without https://)",
            "x-ms-visibility": "important",
            "x-ms-summary": "Instance"
          },
          {
            "name": "statementHandle",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "statement handle",
            "x-ms-summary": "statement handle",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "default": "application/json",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "description": "Content-Type",
            "x-ms-summary": "Content-Type"
          },
          {
            "name": "Accept",
            "in": "header",
            "default": "application/json",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "description": "Accept",
            "x-ms-summary": "Accept"
          },
          {
            "name": "requestId",
            "in": "query",
            "type": "string",
            "description": "Request ID",
            "x-ms-summary": "Request ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "x-ms-summary": "Message",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "code"
                },
                "sqlState": {
                  "type": "string",
                  "description": "sqlState"
                },
                "message": {
                  "type": "string",
                  "description": "message"
                },
                "statementHandle": {
                  "type": "string",
                  "description": "statementHandle"
                },
                "statementStatusUrl": {
                  "type": "string",
                  "description": "statementStatusUrl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request payload is invalid or malformed.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "401": {
            "description": "Unauthorized. The request is not authorized.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The request endpoint is not valid.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed. The request method doesn't match the supported API.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "422": {
            "description": "The execution of the statement exceeded the timeout period. The execution of the statement was cancelled.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                },
                "code": {
                  "type": "string",
                  "example": "000123"
                },
                "sqlState": {
                  "type": "string",
                  "example": "42601"
                },
                "message": {
                  "type": "string",
                  "example": "successfully executed"
                },
                "createdOn": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Timestamp that specifies when the statement execution started. The timestamp is expressed in milliseconds since the epoch",
                  "example": 1597090533987
                },
                "statementStatusUrl": {
                  "type": "string",
                  "example": "/api/v2/statements/GUID value"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. The server hits an unrecoverable system error.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable. The request was not processed due to server side timeouts.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout. The request was not processed due to server side timeouts.",
            "schema": {
              "type": "object",
              "properties": {
                "statementHandle": {
                  "type": "string",
                  "example": "GUID value"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BlobDataSetsMetadata": {
      "description": "Blob dataset metadata",
      "type": "object",
      "properties": {
        "source": {
          "description": "Blob dataset source",
          "type": "string"
        },
        "displayName": {
          "description": "Blob dataset display name",
          "type": "string"
        },
        "urlEncoding": {
          "description": "Blob dataset url encoding",
          "type": "string"
        }
      }
    },
    "DataSet": {
      "description": "Dataset",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Dataset name",
          "type": "string"
        },
        "DisplayName": {
          "description": "Dataset display name",
          "type": "string"
        },
        "query": {
          "description": "Pass-through Native Queries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PassThroughNativeQuery"
          },
          "readOnly": true
        }
      }
    },
    "DataSetsList": {
      "description": "List of datasets",
      "type": "object",
      "properties": {
        "value": {
          "description": "List of datasets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSet"
          }
        }
      }
    },
    "DataSetsMetadata": {
      "description": "Dataset metadata",
      "type": "object",
      "properties": {
        "tabular": {
          "$ref": "#/definitions/TabularDataSetsMetadata"
        },
        "blob": {
          "$ref": "#/definitions/BlobDataSetsMetadata"
        }
      }
    },
    "Item": {
      "description": "Table item entity",
      "type": "object",
      "properties": {
        "dynamicProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Object"
          }
        }
      },
      "additionalProperties": {
        "$ref": "#/definitions/Object"
      }
    },
    "ItemsList": {
      "description": "List of Items",
      "type": "object",
      "properties": {
        "value": {
          "description": "List of Items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {}
    },
    "PassThroughNativeQuery": {
      "description": "static schema for pass-through native query execution",
      "type": "object",
      "properties": {
        "Language": {
          "description": "Query language",
          "type": "string"
        }
      }
    },
    "Table": {
      "description": "Represents a table.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the table. The name is used at runtime.",
          "type": "string"
        },
        "DisplayName": {
          "description": "The display name of the table.",
          "type": "string"
        },
        "DynamicProperties": {
          "description": "Additional table properties provided by the connector to the clients.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Object"
          },
          "readOnly": true
        }
      }
    },
    "TableCapabilitiesMetadata": {
      "description": "Metadata for a table (capabilities)",
      "type": "object",
      "properties": {
        "sortRestrictions": {
          "$ref": "#/definitions/TableSortRestrictionsMetadata"
        },
        "filterRestrictions": {
          "$ref": "#/definitions/TableFilterRestrictionsMetadata"
        },
        "selectRestrictions": {
          "$ref": "#/definitions/TableSelectRestrictionsMetadata"
        },
        "isOnlyServerPagable": {
          "description": "Server paging restrictions",
          "type": "boolean"
        },
        "filterFunctionSupport": {
          "description": "List of supported filter capabilities",
          "type": "array",
          "items": {
            "enum": [
              "eq",
              "ne",
              "gt",
              "ge",
              "lt",
              "le",
              "and",
              "or",
              "contains",
              "startswith",
              "endswith",
              "length",
              "indexof",
              "replace",
              "substring",
              "substringof",
              "tolower",
              "toupper",
              "trim",
              "concat",
              "year",
              "month",
              "day",
              "hour",
              "minute",
              "second",
              "date",
              "time",
              "now",
              "totaloffsetminutes",
              "totalseconds",
              "floor",
              "ceiling",
              "round",
              "not",
              "negate",
              "add",
              "sub",
              "mul",
              "div",
              "mod",
              "sum",
              "min",
              "max",
              "average",
              "countdistinct",
              "null"
            ],
            "type": "string"
          }
        },
        "serverPagingOptions": {
          "description": "List of supported server-driven paging capabilities",
          "type": "array",
          "items": {
            "enum": [
              "top",
              "skiptoken"
            ],
            "type": "string"
          }
        }
      }
    },
    "TableFilterRestrictionsMetadata": {
      "description": "Metadata for a table (filter restrictions)",
      "type": "object",
      "properties": {
        "filterable": {
          "description": "Indicates whether this table has filterable columns",
          "type": "boolean"
        },
        "nonFilterableProperties": {
          "description": "List of non filterable properties",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiredProperties": {
          "description": "List of required properties",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TableMetadata": {
      "description": "Table metadata",
      "type": "object",
      "properties": {
        "name": {
          "description": "Table name",
          "type": "string"
        },
        "title": {
          "description": "Table title",
          "type": "string"
        },
        "x-ms-permission": {
          "description": "Table permission",
          "type": "string"
        },
        "x-ms-capabilities": {
          "$ref": "#/definitions/TableCapabilitiesMetadata"
        },
        "schema": {
          "$ref": "#/definitions/Object"
        },
        "referencedEntities": {
          "$ref": "#/definitions/Object"
        },
        "webUrl": {
          "description": "URL link",
          "type": "string"
        }
      }
    },
    "TableSelectRestrictionsMetadata": {
      "description": "Metadata for a table (select restrictions)",
      "type": "object",
      "properties": {
        "selectable": {
          "description": "Indicates whether this table has selectable columns",
          "type": "boolean"
        }
      }
    },
    "TablesList": {
      "description": "Represents a list of tables.",
      "type": "object",
      "properties": {
        "value": {
          "description": "List of Tables",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table"
          }
        }
      }
    },
    "TableSortRestrictionsMetadata": {
      "description": "Metadata for a table (sort restrictions)",
      "type": "object",
      "properties": {
        "sortable": {
          "description": "Indicates whether this table has sortable columns",
          "type": "boolean"
        },
        "unsortableProperties": {
          "description": "List of unsortable properties",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ascendingOnlyProperties": {
          "description": "List of properties which support ascending order only",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TabularDataSetsMetadata": {
      "description": "Tabular dataset metadata",
      "type": "object",
      "properties": {
        "source": {
          "description": "Dataset source",
          "type": "string"
        },
        "displayName": {
          "description": "Dataset display name",
          "type": "string"
        },
        "urlEncoding": {
          "description": "Dataset url encoding",
          "type": "string"
        },
        "tableDisplayName": {
          "description": "Table display name",
          "type": "string"
        },
        "tablePluralName": {
          "description": "Table plural display name",
          "type": "string"
        }
      }
    }
  },
  "x-ms-capabilities": {
    "testConnection": {
      "operationId": "TestConnection",
      "parameters": {}
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.snowflake.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.snowflake.com/privacy-policy"
    }
  ]
}