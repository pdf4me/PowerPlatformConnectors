{
	"swagger": "2.0",
	"info": {
		"contact": {
			"email": "LEGTechOps@amadeus.com",
			"name": "Amadeus IT Group, S.A. - LEG TechOps",
			"url": "https://www.amadeus.com"
		},
		"description": "Using this connector allows admins and user to connect to their Ironclad CLM demo, preview and production instances and perform various operations such as creating, updating, deleting and retrieving records, workflows, comments, approvals, signatures, attachments, and more. Follow https://developer.ironcladapp.com/reference/register-oauth-client and register a client to get the client ID and client secret.",
		"title": "Ironclad CLM",
		"version": "1.0"
	},
	"x-ms-connector-metadata": [
		{
			"propertyName": "Website",
			"propertyValue": "https://ironcladapp.com/"
		},
		{
			"propertyName": "Privacy Policy",
			"propertyValue": "https://legal.ironcladapp.com/privacy-policy"
		},
		{
			"propertyName": "Categories",
			"propertyValue": "Commerce"
		}
	],
	"schemes": [
		"https"
	],
	"host": "ironcladapp.com",
	"basePath": "/",
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/public/api/v1/records": {
			"get": {
				"description": "View all records in the company, with filtering available via query parameters.",
				"operationId": "ListAllRecords",
				"parameters": [
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/recordProperties_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/recordTypes_query"
					},
					{
						"$ref": "#/parameters/recordLastUpdated_query"
					},
					{
						"$ref": "#/parameters/sortField_query"
					},
					{
						"$ref": "#/parameters/sortDirection_query"
					},
					{
						"$ref": "#/parameters/recordFilter_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Records Retrieved",
						"schema": {
							"properties": {
								"count": {
									"$ref": "#/definitions/count_integer"
								},
								"list": {
									"$ref": "#/definitions/recordsGetFormatted_array"
								},
								"page": {
									"$ref": "#/definitions/page_integer"
								},
								"pageSize": {
									"$ref": "#/definitions/pageSize_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List All Records",
				"x-ms-visibility": "important"
			},
			"post": {
				"description": "Create a contract record by specifying its intended metadata properties.",
				"operationId": "CreateRecord",
				"parameters": [
					{
						"$ref": "#/parameters/recordPost_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Record Created",
						"schema": {
							"$ref": "#/definitions/recordGetStatic_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Record",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/records/export": {
			"get": {
				"description": "Export a records report with filtering available via query parameters.",
				"operationId": "ExportRecords",
				"parameters": [
					{
						"$ref": "#/parameters/recordExportProperties_query"
					},
					{
						"$ref": "#/parameters/recordTypes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Reecords Exported",
						"schema": {
							"description": "The XLSX file of the records report.",
							"title": "Records Report",
							"type": "file",
							"x-ms-visibility": "important"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve XLSX Export File of Records",
				"x-ms-visibility": "advanced"
			}
		},
		"/public/api/v1/records/metadata": {
			"get": {
				"description": "View the schema associated with contract records, including available record types and metadata properties.",
				"operationId": "RetrieveRecordSchemas",
				"parameters": [
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/recordProperties_query"
					}
				],
				"responses": {
					"200": {
						"description": "Record Schema Retrieved",
						"schema": {
							"properties": {
								"properties": {
									"$ref": "#/definitions/recordSchemaPropertiesGet_object"
								},
								"recordTypes": {
									"$ref": "#/definitions/recordTypesDictionary_object"
								},
								"formattedRecordTypes": {
									"$ref": "#/definitions/recordTypesFormatted_array"
								},
								"formattedProperties": {
									"$ref": "#/definitions/recordPropertiesFormatted_array"
								},
								"formattedClauses": {
									"$ref": "#/definitions/recordPropertiesFormatted_array"
								},
								"formattedAttachments": {
									"$ref": "#/definitions/recordAttachmentsFormatted_array"
								},
								"requestedProperties": {
									"$ref": "#/definitions/requestedProperties_string"
								},
								"formattedSchema": {
									"$ref": "#/definitions/recordSchemaFormatted_object"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve Record Schemas",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/records/smart-import": {
			"get": {
				"description": "Retrieve status of predictions of specific smart import record or all records in an import, one of Record Id or Import Id is required.",
				"operationId": "RerievePredictions",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_query"
					},
					{
						"$ref": "#/parameters/recordImportId_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Predictions Retrieved",
						"schema": {
							"$ref": "#/definitions/predictions_array"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve Predictions",
				"x-ms-visibility": "important"
			},
			"post": {
				"consumes": [
					"multipart/form-data"
				],
				"description": "Upload a file to create a record with smart import and predictions. Provide none of recordType, newRecordTypeId, or newRecordTypeDisplayName to default to Imported type.",
				"operationId": "CreateSmartImportRecord",
				"parameters": [
					{
						"$ref": "#/parameters/recordType_formData"
					},
					{
						"$ref": "#/parameters/recordNewRecordTypeId_formData"
					},
					{
						"$ref": "#/parameters/recordNewRecordTypeDisplayName_formData"
					},
					{
						"$ref": "#/parameters/attachment_formData"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Smart Import Record Created",
						"schema": {
							"properties": {
								"importId": {
									"$ref": "#/definitions/importId_string"
								},
								"recordId": {
									"$ref": "#/definitions/recordId_string"
								},
								"remainingCredits": {
									"$ref": "#/definitions/remainingCredits_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Smart Import Record",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/records/smart-import/{Import}/": {
			"post": {
				"consumes": [
					"multipart/form-data"
				],
				"description": "Upload a file to an existing import and create a record with smart import and predictions. Provide none of recordType, newRecordTypeId, or newRecordTypeDisplayName to default to Imported type.",
				"operationId": "ExistingSmartImportRecord",
				"parameters": [
					{
						"$ref": "#/parameters/recordSmartImport_path"
					},
					{
						"$ref": "#/parameters/recordType_formData"
					},
					{
						"$ref": "#/parameters/recordNewRecordTypeId_formData"
					},
					{
						"$ref": "#/parameters/recordNewRecordTypeDisplayName_formData"
					},
					{
						"$ref": "#/parameters/attachment_formData"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Data Added to Existing Smart Record Import",
						"schema": {
							"properties": {
								"importId": {
									"$ref": "#/definitions/importId_string"
								},
								"recordId": {
									"$ref": "#/definitions/recordId_string"
								},
								"remainingCredits": {
									"$ref": "#/definitions/remainingCredits_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Upload a Smart Import Record to an existing Import",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/records/{Record}": {
			"delete": {
				"description": "Delete an existing record.",
				"operationId": "DeleteRecord",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/returnRepresentation_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Record Deleted"
					},
					"204": {
						"description": "Record Deleted"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Delete a Record",
				"x-ms-visibility": "important"
			},
			"get": {
				"description": "View a specific record and its associated data.",
				"operationId": "RetrieveRecord",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Record Retrieved",
						"schema": {
							"$ref": "#/definitions/recordGetDynamic_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve Record",
				"x-ms-visibility": "important"
			},
			"patch": {
				"description": "Update specific fields on a record.",
				"operationId": "UpdateRecordMetadata",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/recordPatch_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Record Metadata Updated",
						"schema": {
							"$ref": "#/definitions/recordGetDynamic_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Update Record Metadata"
			},
			"put": {
				"description": "Update an existing record with a new set of metadata.",
				"operationId": "ReplaceRecord",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/recordPost_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Record Replaced",
						"schema": {
							"$ref": "#/definitions/recordGetDynamic_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Replace a Record"
			}
		},
		"/public/api/v1/records/{Record}/attachments/signedCopy": {
			"delete": {
				"description": "Remove the signed copy associated with a specific record.",
				"operationId": "RemoveSignedCopyDocument",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Signed Copy Removed",
						"schema": {

						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Remove Record Signed Copy",
				"x-ms-visibility": "important"
			},
			"get": {
				"description": "View the signed copy associated with a specific record.",
				"operationId": "RetrieveSignedCopyDocument",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Signed Copy Retrieved",
						"schema": {

						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve Record Signed Copy",
				"x-ms-visibility": "important"
			},
			"post": {
				"consumes": [
					"multipart/form-data",
					"application/json"
				],
				"description": "Create a signed copy associated with a specific record.",
				"operationId": "CreateSignedCopyAttachment",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"attachment": {
									"$ref": "#/definitions/attachment_byte"
								},
								"metadata": {
									"$ref": "#/definitions/attachmentMetadata_object"
								}
							},
							"type": "object",
							"required": [
								"attachment",
								"metadata"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Signed Copy Created",
						"schema": {

						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create Record Signed Copy",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/records/{Record}/attachments/{Key}": {
			"delete": {
				"description": "Remove an attachment associated with a specific record.",
				"operationId": "RemoveAttachment",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/recordDocumentKeyFromSchema_path"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Attachment Removed",
						"schema": {

						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Remove an Attachment on a Record",
				"x-ms-visibility": "important"
			},
			"get": {
				"description": "View an attachment associated with a specific record.",
				"operationId": "RetrieveAttachment",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/recordDocumentKeyFromSchema_path"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Attachment Retrieved",
						"schema": {
							"$ref": "#/definitions/attachment_binary"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve an Attachment on a Record",
				"x-ms-visibility": "important"
			},
			"post": {
				"description": "Create an attachment associated with a specific record.",
				"operationId": "CreateAttachment",
				"parameters": [
					{
						"$ref": "#/parameters/recordId_path"
					},
					{
						"$ref": "#/parameters/recordDocumentKeyFromSchema_path"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"attachment": {
									"$ref": "#/definitions/attachment_byte"
								},
								"metadata": {
									"$ref": "#/definitions/attachmentMetadata_object"
								}
							},
							"type": "object",
							"required": [
								"attachment",
								"metadata"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Attachment Created",
						"schema": {

						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create an Attachment on a Record",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/webhooks": {
			"post": {
				"description": "Creates a webhook for the specified events. Send separate requests if you need to create webhooks for multiple target URLs. Each target URL may only have one active registration.",
				"operationId": "CreateWebhook",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"events": {
									"$ref": "#/definitions/webhookEvents_array"
								},
								"targetURL": {
									"$ref": "#/definitions/webhookTargetUrlPost_string"
								}
							},
							"required": [
								"targetURL",
								"events"
							],
							"type": "object",
							"x-ms-visibility": "important"
						},
						"x-ms-visibility": "important"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"201": {
						"description": "Webhook Created",
						"schema": {
							"properties": {
								"company": {
									"$ref": "#/definitions/companyId_string"
								},
								"events": {
									"$ref": "#/definitions/webhookEvents_array"
								},
								"id": {
									"$ref": "#/definitions/webhookId_string"
								},
								"targetURL": {
									"$ref": "#/definitions/webhookTargetUrlGet_string"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create Webhook",
				"x-ms-trigger": "single",
				"x-ms-visibility": "important"
			},
			"x-ms-notification-content": {
				"description": "Ironclad Event",
				"schema": {
					"$ref": "#/definitions/webhookNotificationContent_object"
				}
			}
		},
		"/public/api/v1/webhooks/{Webhook}": {
			"delete": {
				"description": "Delete a specific webhook.",
				"operationId": "DeleteWebhook",
				"parameters": [
					{
						"$ref": "#/parameters/webhookID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Webhook Deleted"
					},
					"201": {
						"description": "Webhook Deleted"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Delete a Webhook",
				"x-ms-visibility": "advanced"
			},
			"get": {
				"description": "View the data associated with a specific webhook.",
				"operationId": "RetrieveWebhook",
				"parameters": [
					{
						"$ref": "#/parameters/webhookID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Webhook Retrieved",
						"schema": {
							"$ref": "#/definitions/webhookConfiguration_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a Webhook",
				"x-ms-visibility": "advanced"
			},
			"patch": {
				"description": "Update the data associated with a specific webhook.",
				"operationId": "UpdateWebhook",
				"parameters": [
					{
						"$ref": "#/parameters/webhookID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Webhook Updated",
						"schema": {
							"$ref": "#/definitions/webhookConfiguration_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Update a Webhook",
				"x-ms-visibility": "advanced"
			}
		},
		"/public/api/v1/workflow-schemas": {
			"get": {
				"description": "Returns a list of workflow schemas. Each schema specifies the fields used in the workflow's launch form.",
				"operationId": "ListWorkflowSchemas",
				"parameters": [
					{
						"$ref": "#/parameters/workflowForm_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "List of Workflow Schemas Retrieved",
						"schema": {
							"properties": {
								"list": {
									"$ref": "#/definitions/workflowSchemas_array"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Workflow Schemas",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflow-schemas/{Schema}": {
			"get": {
				"description": "Returns the fields used in the workflow's launch form..",
				"operationId": "RetrieveWorkflowSchema",
				"parameters": [
					{
						"$ref": "#/parameters/workflowSchemaID_path"
					},
					{
						"$ref": "#/parameters/workflowForm_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Schema Retrieved",
						"schema": {
							"$ref": "#/definitions/workflowSchema_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a Workflow Schema"
			}
		},
		"/public/api/v1/workflows": {
			"get": {
				"description": "List all workflows in your Ironclad account.",
				"operationId": "ListAllWorkflows",
				"parameters": [
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/sortField_query"
					},
					{
						"$ref": "#/parameters/sortDirection_query"
					},
					{
						"$ref": "#/parameters/workflowStatus_query"
					},
					{
						"$ref": "#/parameters/workflowTemplateID_query"
					},
					{
						"$ref": "#/parameters/workflowLastUpdated_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "List of Workflows Retrieved",
						"schema": {
							"properties": {
								"count": {
									"$ref": "#/definitions/count_integer"
								},
								"list": {
									"$ref": "#/definitions/workflowsGet_array"
								},
								"page": {
									"$ref": "#/definitions/page_integer"
								},
								"pageSize": {
									"$ref": "#/definitions/pageSize_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Workflows"
			},
			"post": {
				"description": "Launch a new workflow synchronously.",
				"operationId": "CreateWorkflow",
				"parameters": [
					{
						"$ref": "#/parameters/workflowForm_query"
					},
					{
						"$ref": "#/parameters/workflow_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Created",
						"schema": {
							"$ref": "#/definitions/workflowSchemaFromTemplateGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Workflow Synchronously",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/async": {
			"post": {
				"description": "Launch a new workflow asynchronously for non-blocking performance, which is helpful when/if you provide files to the workflow.",
				"operationId": "CreateWorkflowAsync",
				"parameters": [
					{
						"$ref": "#/parameters/workflowForm_query"
					},
					{
						"$ref": "#/parameters/workflow_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Created",
						"schema": {
							"properties": {
								"asyncJobId": {
									"$ref": "#/definitions/asyncJobId_string"
								},
								"asyncJobStatusUrl": {
									"$ref": "#/definitions/asyncJobStatusUrl_string"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Workflow Asynchronously",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/async/{AsyncJob}": {
			"get": {
				"description": "Check the status of a Workflow you created while using the Create a Workflow Async route.",
				"operationId": "RetrieveAsyncJobStatus",
				"parameters": [
					{
						"$ref": "#/parameters/workflowAsyncJob_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Status Retrieved",
						"schema": {
							"properties": {
								"status": {
									"$ref": "#/definitions/workflowAsyncLaunchStatus_string"
								},
								"workflow": {
									"$ref": "#/definitions/workflowAsync_object"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve the Status of an Async Workflow Create Job",
				"x-ms-visibility": "advanced"
			}
		},
		"/public/api/v1/workflows/{Workflow}": {
			"get": {
				"description": "View the data associated with a specific workflow.",
				"operationId": "RetrieveWorkflow",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Retrieved",
						"schema": {
							"$ref": "#/definitions/workflowSchemaFromWorkflowGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/approval-requests": {
			"get": {
				"description": "Returns a list of approval requests that have taken place on the workflow.",
				"operationId": "ListApprovalRequests",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/workflowActionDetails_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Approval Requests Retrieved",
						"schema": {
							"properties": {
								"count": {
									"$ref": "#/definitions/count_integer"
								},
								"list": {
									"$ref": "#/definitions/approvalRequestsList_array"
								},
								"page": {
									"$ref": "#/definitions/page_integer"
								},
								"pageSize": {
									"$ref": "#/definitions/pageSize_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve the Approval Requests on a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/approvals": {
			"get": {
				"description": "Returns a list of approvals for the workflow. The approvalGroups property will display only triggered approvals (i.e. conditional approvals that have not been triggered will not appear).",
				"operationId": "ListWorkflowApprovals",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Approvals Retrieved",
						"schema": {
							"$ref": "#/definitions/workflowsApprovalsGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Workflow Approvals",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/approvals/{Role}": {
			"patch": {
				"description": "Updates an approval to the specified status. Approvals can only be updated during the Review step.",
				"operationId": "UpdateWorkflowApprovals",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowRoleID_path"
					},
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"status": {
									"$ref": "#/definitions/approvalStatusPost_string"
								},
								"user": {
									"$ref": "#/definitions/userPost_object"
								}
							},
							"required": [
								"user",
								"status"
							],
							"type": "object"
						}
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Approval Updated",
						"schema": {
							"$ref": "#/definitions/approvalUpdated_boolean"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Update Approval on a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/attributes": {
			"patch": {
				"description": "Update the attributes on a workflow in the Review step. Select a configuration below to load a list up paths in that configuration.",
				"operationId": "UpdateWorkflowMetadata",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowConfiguration_dummy"
					},
					{
						"$ref": "#/parameters/workflowUpdateActions_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Metadata Updated",
						"schema": {
							"$ref": "#/definitions/workflowSchemaFromWorkflowGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Update Workflow Metadata",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/cancel": {
			"post": {
				"description": "Cancel a workflow.",
				"operationId": "CancelWorkflow",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"in": "body",
						"name": "user",
						"required": true,
						"schema": {
							"properties": {
								"comment": {
									"$ref": "#/definitions/commentSimplePost_object"
								},
								"notifyCounterparty": {
									"$ref": "#/definitions/notifyCounterparty_boolean"
								}
							},
							"required": [
								"notifyCounterparty",
								"comment"
							],
							"type": "object"
						}
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"204": {
						"description": "Workflow Canceled",
						"schema": {
							"type": "object",
							"x-ms-visibility": "internal"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Cancel Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/comments": {
			"get": {
				"description": "Return a list of comments on a workflow.",
				"operationId": "ListWorkflowComments",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Comments Retrieved",
						"schema": {
							"properties": {
								"count": {
									"$ref": "#/definitions/count_integer"
								},
								"list": {
									"$ref": "#/definitions/commentsGet_array"
								},
								"page": {
									"$ref": "#/definitions/page_integer"
								},
								"pageSize": {
									"$ref": "#/definitions/pageSize_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Comments on a Workflow"
			},
			"post": {
				"description": "Creates a comment in the specified workflow's activity feed.",
				"operationId": "CreateComment",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowCommentPost_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Comment Created",
						"schema": {
							"$ref": "#/definitions/commentGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Comment on a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/comments/{Comment}": {
			"get": {
				"description": "Return a single comment for a specified workflow.",
				"operationId": "RetrieveComment",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowCommentID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Comment Retrieved",
						"schema": {
							"$ref": "#/definitions/commentGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a Comment from a Specified Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/document/{Key}/download": {
			"get": {
				"description": "Download a document associated with a specific workflow via a reference to its document key.",
				"operationId": "RetrieveWorkflowDocument",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowDocumentKey_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Document Retrieved",
						"schema": {
							"description": "The document as a file.",
							"title": "Document",
							"type": "file",
							"x-ms-visibility": "important"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a Workflow Document"
			}
		},
		"/public/api/v1/workflows/{Workflow}/documents/{Attribute}": {
			"post": {
				"description": "Create a document in the specified workflow attribute. This will only create new documents. It does not support document versioning. Select a configuration below to load a list of supported documents in that configuration.",
				"operationId": "CreateWorkflowDocument",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowConfiguration_dummy"
					},
					{
						"$ref": "#/parameters/workflowDocumentAttribute_path"
					},
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"attachment": {
									"$ref": "#/definitions/attachment_byte"
								},
								"metadata": {
									"$ref": "#/definitions/documentMetadata_object"
								}
							},
							"type": "object",
							"required": [
								"attachment",
								"metadata"
							]
						}
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Document Created",
						"schema": {
							"description": "The document as a file.",
							"title": "Document",
							"type": "file",
							"x-ms-visibility": "important"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Workflow Document"
			}
		},
		"/public/api/v1/workflows/{Workflow}/emails": {
			"get": {
				"description": "List all email threads in the specified workflow.",
				"operationId": "RetrieveEmailThreads",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Email Threads Retrieved",
						"schema": {
							"properties": {
								"count": {
									"$ref": "#/definitions/count_integer"
								},
								"list": {
									"$ref": "#/definitions/workflowEmailsGet_array"
								},
								"page": {
									"$ref": "#/definitions/page_integer"
								},
								"pageSize": {
									"$ref": "#/definitions/pageSize_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve Email Threads from a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/emails/{Email}": {
			"get": {
				"description": "List a single email thread for a specified workflow.",
				"operationId": "RetrieveEmailThread",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowEmailID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Email Thread Retrieved",
						"schema": {
							"$ref": "#/definitions/workflowEmailGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve an Email Thread from a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/participants": {
			"get": {
				"description": "Returns a list of workflow participants.",
				"operationId": "ListWorkflowParticipants",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/workflowUserEmail_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Participants Retrieved",
						"schema": {
							"$ref": "#/definitions/workflowParticipantsGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Workflow Participants",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/pause": {
			"post": {
				"description": "Pause a workflow.",
				"operationId": "PauseWorkflow",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"comment": {
									"$ref": "#/definitions/commentSimplePost_object"
								},
								"notifyCounterparty": {
									"$ref": "#/definitions/notifyCounterparty_boolean"
								}
							},
							"required": [
								"comment",
								"notifyCounterparty"
							],
							"type": "object",
							"x-ms-visibility": "important"
						}
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"204": {
						"description": "Workflow Paused",
						"schema": {
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Pause Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/resume": {
			"post": {
				"description": "Resume a workflow.",
				"operationId": "ResumeWorkflow",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"properties": {
								"comment": {
									"$ref": "#/definitions/commentSimplePost_object"
								},
								"notifyCounterparty": {
									"$ref": "#/definitions/notifyCounterparty_boolean"
								}
							},
							"required": [
								"comment",
								"notifyCounterparty"
							],
							"type": "object",
							"x-ms-visibility": "important"
						}
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"204": {
						"description": "Workflow Resumed",
						"schema": {
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Resume Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/revert-to-review": {
			"patch": {
				"description": "Reverts a workflow to the Review step. Only workflows sourced from workflow Designer and in the Sign step can be reverted.",
				"operationId": "RevertToReview",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowRevertingUser_body"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"204": {
						"description": "Workflow Reverted to Review"
					},
					"201": {
						"description": "Workflow Reverted to Review"
					},
					"200": {
						"description": "Workflow Reverted to Review"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Revert a Workflow to the Review Step",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/signatures": {
			"get": {
				"description": "Returns a list of workflow signers and the status of their signature.",
				"operationId": "ListWorkflowSignatures",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Workflow Signatures Retrieved",
						"schema": {
							"properties": {
								"signers": {
									"$ref": "#/definitions/workflowSigners_array"
								},
								"title": {
									"$ref": "#/definitions/workflowTitle_string"
								},
								"workflowId": {
									"$ref": "#/definitions/uniqueId_string"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"summary": "List All Workflow Signers",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/turn-history": {
			"get": {
				"description": "An array of objects for each turn on a workflow.",
				"operationId": "ListTurnHistory",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/page_query"
					},
					{
						"$ref": "#/parameters/pageSize_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Turn History Retrieved",
						"schema": {
							"properties": {
								"count": {
									"$ref": "#/definitions/count_integer"
								},
								"list": {
									"$ref": "#/definitions/turnHistory_array"
								},
								"page": {
									"$ref": "#/definitions/page_integer"
								},
								"pageSize": {
									"$ref": "#/definitions/pageSize_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve the Turn History on a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/public/api/v1/workflows/{Workflow}/upload-signed": {
			"post": {
				"description": "Upload a fully or partially signed document to a specified workflow that is in sign step.",
				"operationId": "CreateSignedDocument",
				"parameters": [
					{
						"$ref": "#/parameters/workflowId_path"
					},
					{
						"$ref": "#/parameters/workflowDocument_formData"
					},
					{
						"$ref": "#/parameters/json_header"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Signed Document Uploaded",
						"schema": {
							"$ref": "#/definitions/uploadSignedGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Signed Document on a Workflow",
				"x-ms-visibility": "important"
			}
		},
		"/scim/v2/Groups": {
			"get": {
				"description": "List all Groups via SCIM.",
				"operationId": "ListGroups",
				"parameters": [
					{
						"$ref": "#/parameters/scimCount_query"
					},
					{
						"$ref": "#/parameters/scimStartIndex_query"
					},
					{
						"$ref": "#/parameters/scimRecordFilter_query"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "List of Groups Retrieved",
						"schema": {
							"properties": {
								"itemsPerPage": {
									"$ref": "#/definitions/itemsPerPage_integer"
								},
								"Resources": {
									"$ref": "#/definitions/scimGroupResourcesGet_array"
								},
								"schemas": {
									"$ref": "#/definitions/scimSchemasGet_array"
								},
								"startIndex": {
									"$ref": "#/definitions/startIndex_integer"
								},
								"totalResults": {
									"$ref": "#/definitions/totalResults_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Groups",
				"x-ms-visibility": "important"
			},
			"post": {
				"description": "Create a Group via SCIM.",
				"operationId": "CreateGroup",
				"parameters": [
					{
						"$ref": "#/parameters/scimGroup_body"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"201": {
						"description": "Group Created",
						"schema": {
							"$ref": "#/definitions/scimGroupGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a Group",
				"x-ms-visibility": "important"
			}
		},
		"/scim/v2/Groups/{Group}": {
			"delete": {
				"description": "Delete a Group via SCIM.",
				"operationId": "DeleteGroup",
				"parameters": [
					{
						"$ref": "#/parameters/scimGroupID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/json_header"
					}
				],
				"responses": {
					"200": {
						"description": "Group Deleted"
					},
					"204": {
						"description": "Group Deleted"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Delete a Group",
				"x-ms-visibility": "important"
			},
			"get": {
				"description": "Retrieve a Group via SCIM.",
				"operationId": "RetrieveGroup",
				"parameters": [
					{
						"$ref": "#/parameters/scimGroupID_path"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "Group Retrieved",
						"schema": {
							"$ref": "#/definitions/scimGroupGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a Group",
				"x-ms-visibility": "important"
			},
			"patch": {
				"description": "Update a Group via SCIM.",
				"operationId": "UpdateGroup",
				"parameters": [
					{
						"$ref": "#/parameters/scimGroupID_path"
					},
					{
						"$ref": "#/parameters/scimGroupOperations_body"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/json_header"
					}
				],
				"responses": {
					"200": {
						"description": "Group Updated",
						"schema": {
							"$ref": "#/definitions/scimGroupGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Update a Group",
				"x-ms-visibility": "important"
			},
			"put": {
				"description": "Replace a Group via SCIM.",
				"operationId": "ReplaceGroup",
				"parameters": [
					{
						"$ref": "#/parameters/scimGroupID_path"
					},
					{
						"$ref": "#/parameters/scimGroup_body"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/json_header"
					}
				],
				"responses": {
					"200": {
						"description": "Group Replaced",
						"schema": {
							"$ref": "#/definitions/scimGroupGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Replace a Group",
				"x-ms-visibility": "important"
			}
		},
		"/scim/v2/Users": {
			"get": {
				"description": "List all Users via SCIM.",
				"operationId": "ListUsers",
				"parameters": [
					{
						"$ref": "#/parameters/scimCount_query"
					},
					{
						"$ref": "#/parameters/scimStartIndex_query"
					},
					{
						"$ref": "#/parameters/scimRecordFilter_query"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "List of Users Retrieved",
						"schema": {
							"properties": {
								"itemsPerPage": {
									"$ref": "#/definitions/itemsPerPage_integer"
								},
								"Resources": {
									"$ref": "#/definitions/scimUserResourcesGet_array"
								},
								"schemas": {
									"$ref": "#/definitions/scimSchemasGet_array"
								},
								"startIndex": {
									"$ref": "#/definitions/startIndex_integer"
								},
								"totalResults": {
									"$ref": "#/definitions/totalResults_integer"
								}
							},
							"type": "object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "List all Users",
				"x-ms-visibility": "important"
			},
			"post": {
				"description": "Create a User via SCIM.",
				"operationId": "CreateUser",
				"parameters": [
					{
						"$ref": "#/parameters/scimUser_body"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"201": {
						"description": "User Created",
						"schema": {
							"$ref": "#/definitions/scimUserGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Create a User",
				"x-ms-visibility": "important"
			}
		},
		"/scim/v2/Users/{User}": {
			"delete": {
				"description": "Delete a User via SCIM.",
				"operationId": "DeleteUser",
				"parameters": [
					{
						"$ref": "#/parameters/scimUserID_path"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/json_header"
					}
				],
				"responses": {
					"204": {
						"description": "User Deleted"
					},
					"201": {
						"description": "User Deleted"
					},
					"200": {
						"description": "User Deleted"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Delete a User",
				"x-ms-visibility": "important"
			},
			"get": {
				"description": "Retrieve a User via SCIM.",
				"operationId": "RetrieveUser",
				"parameters": [
					{
						"$ref": "#/parameters/scimUserID_path"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					}
				],
				"responses": {
					"200": {
						"description": "User Retrieved",
						"schema": {
							"$ref": "#/definitions/scimUserGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Retrieve a User",
				"x-ms-visibility": "important"
			},
			"patch": {
				"description": "Update a User via SCIM.",
				"operationId": "UpdateUser",
				"parameters": [
					{
						"$ref": "#/parameters/scimUserID_path"
					},
					{
						"$ref": "#/parameters/scimUserOperations_body"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/json_header"
					}
				],
				"responses": {
					"200": {
						"description": "User Updated",
						"schema": {
							"$ref": "#/definitions/scimUserGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Update a User",
				"x-ms-visibility": "important"
			},
			"put": {
				"description": "Replace a User via SCIM.",
				"operationId": "ReplaceUser",
				"parameters": [
					{
						"$ref": "#/parameters/scimUserID_path"
					},
					{
						"$ref": "#/parameters/scimUser_body"
					},
					{
						"$ref": "#/parameters/scimExcludedAttributes_query"
					},
					{
						"$ref": "#/parameters/x-as-user-email_header"
					},
					{
						"$ref": "#/parameters/x-as-user-id_header"
					},
					{
						"$ref": "#/parameters/json_header"
					}
				],
				"responses": {
					"200": {
						"description": "User Replaced",
						"schema": {
							"$ref": "#/definitions/scimUserGet_object"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal Server Error"
					},
					"default": {
						"description": "Operation Failed."
					}
				},
				"summary": "Replace a User",
				"x-ms-visibility": "important"
			}
		}
	},
	"definitions": {
		"actorDetails_object": {
			"description": "Details of the actor.",
			"properties": {
				"userEmail": {
					"$ref": "#/definitions/userEmail_string"
				},
				"userName": {
					"$ref": "#/definitions/userUsername_string"
				}
			},
			"title": "Actor Details",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"actorId_string": {
			"description": "The identifier of the actor.",
			"title": "Actor ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"actorType_string": {
			"description": "The type of actor.",
			"title": "Actor Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"addedParticipants_array": {
			"description": "Users added to the conversation.",
			"items": {
				"$ref": "#/definitions/addedParticipant_string"
			},
			"title": "Added Participants",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"addedParticipant_string": {
			"description": "User added to the conversation.",
			"title": "Name",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"addUsersToWorkflow_boolean": {
			"default": true,
			"description": "Set to true to add mentioned users to the workflow",
			"title": "Add to Workflow",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"approvalEndTime_string": {
			"description": "The date and time the approval ended.",
			"format": "date-time",
			"title": "End Time",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"approvalRequest_object": {
			"description": "An approval request for the workflow.",
			"properties": {
				"actorDetails": {
					"$ref": "#/definitions/actorDetails_object"
				},
				"actorId": {
					"$ref": "#/definitions/actorId_string"
				},
				"actorType": {
					"$ref": "#/definitions/actorType_string"
				},
				"approvalType": {
					"$ref": "#/definitions/approvalType_string"
				},
				"duration": {
					"$ref": "#/definitions/duration_integer"
				},
				"endTime": {
					"$ref": "#/definitions/approvalEndTime_string"
				},
				"role": {
					"$ref": "#/definitions/workflowRoleId_string"
				},
				"roleName": {
					"$ref": "#/definitions/workflowRoleDisplayName_string"
				},
				"startTime": {
					"$ref": "#/definitions/approvalStartTime_string"
				},
				"status": {
					"$ref": "#/definitions/approvalStatusGet_string"
				}
			},
			"title": "Approval Request",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"approvalRequestsList_array": {
			"description": "The approval requests for the workflow.",
			"items": {
				"$ref": "#/definitions/approvalRequest_object"
			},
			"title": "Approval Requests",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"approvalStartTime_string": {
			"description": "The date and time the approval started.",
			"format": "date-time",
			"title": "Start Time",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"approvalStatusGet_string": {
			"description": "The status of the approval.",
			"title": "Status",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"approvalStatusPost_string": {
			"description": "The new approval status.",
			"enum": [
				"approved",
				"pending"
			],
			"title": "Status",
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Approved",
					"value": "approved"
				},
				{
					"displayName": "Pending",
					"value": "pending"
				}
			],
			"x-ms-visibility": "important"
		},
		"approvalType_string": {
			"description": "The type of approval.",
			"title": "Approval Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"approvalUpdated_boolean": {
			"description": "True if the approval was successfully updated, false otherwise.",
			"title": "Approval Updated",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"assignee_object": {
			"description": "A user assigned to the workflow.",
			"properties": {
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"userId": {
					"$ref": "#/definitions/userId_string"
				},
				"userName": {
					"$ref": "#/definitions/userUsername_string"
				}
			},
			"title": "Assignee",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"assignees_array": {
			"description": "The assigned users",
			"items": {
				"$ref": "#/definitions/assignee_object"
			},
			"title": "Assignees",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"asyncJobId_string": {
			"description": "The ID of the asynchronous job",
			"title": "Async Job ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"asyncJobStatusUrl_string": {
			"description": "The URL to check the status of the asynchronous job",
			"title": "Async Job Status URL",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"attachmentDisplayName_string": {
			"description": "The display name of the attachment.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"attachmentFilename_string": {
			"description": "Name of the file to be uploaded.",
			"title": "Filename",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"attachmentMetadata_object": {
			"description": "Metadata associated with the attachment.",
			"properties": {
				"filename": {
					"$ref": "#/definitions/attachmentFilename_string"
				}
			},
			"title": "Metadata",
			"type": "object",
			"x-ms-visibility": "important",
			"required": [
				"filename"
			]
		},
		"attachmentName_string": {
			"description": "The internal name of the attachment.",
			"title": "System Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"attachment_binary": {
			"description": "The content of the attachment.",
			"format": "binary",
			"title": "File",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"attachment_byte": {
			"description": "The content of the attachment.",
			"format": "byte",
			"title": "File",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"authorGet_object": {
			"description": "Information about the author of the original comment.",
			"properties": {
				"companyName": {
					"$ref": "#/definitions/userCompanyName_string"
				},
				"displayName": {
					"$ref": "#/definitions/userDisplayName_string"
				},
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"type": {
					"$ref": "#/definitions/userType_string"
				},
				"userId": {
					"$ref": "#/definitions/userId_string"
				}
			},
			"title": "Author",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"commentGet_object": {
			"description": "A comment on the workflow.",
			"properties": {
				"author": {
					"$ref": "#/definitions/authorGet_object"
				},
				"id": {
					"$ref": "#/definitions/commentId_string"
				},
				"commentMessage": {
					"$ref": "#/definitions/commentText_string"
				},
				"reactions": {
					"$ref": "#/definitions/reactions_array"
				},
				"timeStamp": {
					"$ref": "#/definitions/created_string"
				},
				"mentionedUserDetails": {
					"$ref": "#/definitions/commentMentionedUserDetails"
				},
				"addedParticipants": {
					"$ref": "#/definitions/addedParticipants_array"
				},
				"isExternal": {
					"$ref": "#/definitions/isExternal_boolean"
				}
			},
			"title": "Comment",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"commentId_string": {
			"description": "Identifier of the comment.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"commentMentionedUserDisplayName_string": {
			"description": "Name of the mentioned user.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"commentMentionedUserEmail_string": {
			"description": "Email of the mentioned user.",
			"title": "Email",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"commentMentionedUserUserId_string": {
			"description": "Unique identifier of the mentioned user.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"commentMentionedUserDetails": {
			"description": "Details of users mentioned in the comment.",
			"items": {
				"properties": {
					"displayName": {
						"$ref": "#/definitions/commentMentionedUserDisplayName_string"
					},
					"email": {
						"$ref": "#/definitions/commentMentionedUserEmail_string"
					},
					"id": {
						"$ref": "#/definitions/commentMentionedUserUserId_string"
					}
				},
				"type": "object"
			},
			"title": "Mentioned Users",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"commentPost_object": {
			"description": "The comment object.",
			"properties": {
				"addUsersToWorkflow": {
					"$ref": "#/definitions/addUsersToWorkflow_boolean"
				},
				"creator": {
					"$ref": "#/definitions/creatorPost_object"
				},
				"comment": {
					"$ref": "#/definitions/commentText_string"
				},
				"repliedToActivityFeedMessageId": {
					"$ref": "#/definitions/repliedToActivityFeedMessageId_string"
				}
			},
			"required": [
				"comment",
				"creator",
				"addUsersToWorkflow"
			],
			"title": "Comment",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"commentsGet_array": {
			"description": "The list of comments.",
			"items": {
				"$ref": "#/definitions/commentGet_object"
			},
			"title": "Comments",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"commentSimplePost_object": {
			"description": "The comment object.",
			"properties": {
				"addUsersToWorkflow": {
					"$ref": "#/definitions/addUsersToWorkflow_boolean"
				},
				"message": {
					"$ref": "#/definitions/commentText_string"
				}
			},
			"required": [
				"message",
				"addUsersToWorkflow"
			],
			"title": "Comment",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"commentText_string": {
			"description": "The text of the comment.",
			"title": "Message",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"count_integer": {
			"default": 25,
			"description": "The number of records matching your criteria.",
			"format": "int32",
			"title": "Count",
			"type": "integer",
			"x-ms-visibility": "advanced"
		},
		"counterpartyNameGet_string": {
			"description": "The name of the counterparty.",
			"title": "Counterparty Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"companyId_string": {
			"description": "The identifier of the company.",
			"title": "Company ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"created_string": {
			"description": "The date and time of creation.",
			"title": "Created Date Time",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"creatorGet_object": {
			"description": "The Ironclad user that launched the workflow.",
			"properties": {
				"contactNumber": {
					"$ref": "#/definitions/userContactNumber_string"
				},
				"department": {
					"$ref": "#/definitions/userDepartment_string"
				},
				"displayName": {
					"$ref": "#/definitions/userDisplayName_string"
				},
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"id": {
					"$ref": "#/definitions/userId_string"
				},
				"lastUsageTrack": {
					"$ref": "#/definitions/userLastUsageTrack_string"
				},
				"pronoun": {
					"$ref": "#/definitions/userPronoun_string"
				},
				"title": {
					"$ref": "#/definitions/userTitle_string"
				},
				"username": {
					"$ref": "#/definitions/userUsername_string"
				}
			},
			"title": "Creator",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"creatorPost_object": {
			"description": "The Ironclad user (must be a user in your Ironclad account) to be used for launching the workflow.",
			"properties": {
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"id": {
					"$ref": "#/definitions/userId_string"
				},
				"type": {
					"$ref": "#/definitions/userIdentificationAttribute_string"
				}
			},
			"required": [
				"type"
			],
			"title": "Creator",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"documentContentType_string": {
			"description": "The content type of the document.",
			"title": "Content Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"documentDisplayName_string": {
			"description": "The display name of the document.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"documentDownloadPath_string": {
			"description": "The path to the current version of the document.",
			"title": "Download Path",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"documentFileName_string": {
			"description": "The file name of the document.",
			"title": "File Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"documentKey_string": {
			"description": "The key of the document.",
			"title": "Key",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"documentLastModified_object": {
			"description": "Information when and by whom the document was last modified.",
			"properties": {
				"author": {
					"$ref": "#/definitions/authorGet_object"
				},
				"timestamp": {
					"$ref": "#/definitions/timestamp_string"
				}
			},
			"title": "Last Modified",
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"documentMetadata_object": {
			"description": "Metadata associated with the workflow document.",
			"properties": {
				"filename": {
					"$ref": "#/definitions/attachmentFilename_string"
				},
				"comment": {
					"$ref": "#/definitions/documentMetadataComment_object"
				}
			},
			"title": "Metadata",
			"type": "object",
			"x-ms-visibility": "important",
			"required": [
				"comment",
				"filename"
			]
		},
		"documentMetadataComment_object": {
			"description": "The comment associated with creating the workflow document.",
			"properties": {
				"message": {
					"$ref": "#/definitions/commentText_string"
				}
			},
			"required": [
				"message"
			],
			"title": "Comment",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"documentSystemName_string": {
			"description": "The system name of the document.",
			"title": "System Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"documentVersion_string": {
			"description": "The version identifier of the workflow document.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"documentVersionNumber_number": {
			"description": "Version number of the document.",
			"title": "Number",
			"type": "number",
			"x-ms-visibility": "important"
		},
		"duration_integer": {
			"description": "The duration of the approval request.",
			"title": "Duration",
			"type": "number",
			"x-ms-visibility": "important"
		},
		"emojiId_string": {
			"description": "Identifier of the emoji used in the reaction.",
			"title": "Emoji ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"event_string": {
			"description": "The type of the event.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"familyName_string": {
			"description": "The family name of the user.",
			"title": "Family Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"givenName_string": {
			"description": "The given name of the user.",
			"title": "Given Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"groupExternalId_string": {
			"description": "The external identifier of the group.",
			"title": "External ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"groupId_string": {
			"description": "The identifier of the group.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"groupMemberType_string": {
			"description": "Type of the member.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"importId_string": {
			"description": "The unique identifier of the import operation.",
			"title": "Import ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"instanceId_string": {
			"description": "The identifier of the Ironclad instance.",
			"title": "Instance ID",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"isCancelled_boolean": {
			"description": "If true, the workflow was cancelled.",
			"title": "Cancelled",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"isComplete_boolean": {
			"description": "If true, the workflow was completed.",
			"title": "Complete",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"isExternal_boolean": {
			"description": "Indicates if the comment is from an external user.",
			"title": "Is External",
			"type": "boolean",
			"x-ms-visibility": "advanced"
		},
		"isRevertibleToReview_boolean": {
			"description": "If true, the workflow can be reverted to review.",
			"title": "Revertible to Review",
			"type": "boolean",
			"x-ms-visibility": "advanced"
		},
		"isWetSigned_boolean": {
			"description": "If true, the signer signed in wet ink.",
			"title": "Wet Signed",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"itemsPerPage_integer": {
			"description": "The number of resources returned in a list response page.",
			"example": 1,
			"title": "Items Per Page",
			"type": "integer",
			"x-ms-visibility": "important"
		},
		"lastUpdated_string": {
			"description": "The date and time of the last updated.",
			"title": "Last Updated Date Time",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"notifyCounterparty_boolean": {
			"description": "Set to true to notify the counterparty of the cancellation.",
			"title": "Notify Counterparty",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"page_integer": {
			"description": "The index of the page.",
			"format": "int32",
			"title": "Page",
			"type": "integer",
			"x-ms-visibility": "advanced"
		},
		"pageSize_integer": {
			"description": "A limit of the number of results.",
			"format": "int32",
			"title": "Page Size",
			"type": "integer",
			"x-ms-visibility": "advanced"
		},
		"paperSourceGet_string": {
			"description": "The source of the workflow documents.",
			"title": "Paper Source",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"prediction_object": {
			"description": "The prediction status for a record in the smart import.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordId_string"
				},
				"status": {
					"$ref": "#/definitions/predictionStatus_string"
				}
			},
			"title": "Prediction",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"predictions_array": {
			"description": "The prediction statuses for the smart import.",
			"items": {
				"$ref": "#/definitions/prediction_object"
			},
			"title": "Predictions",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"predictionStatus_string": {
			"description": "The status of the prediction.",
			"title": "Status",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"propertyDataType_string": {
			"description": "The data type of the property.",
			"title": "Data Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"propertyDisplayName_string": {
			"description": "The display name of the property.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"propertyReadOnly_boolean": {
			"description": "If true, the property is read-only.",
			"title": "Read-Only",
			"type": "boolean",
			"x-ms-visibility": "internal"
		},
		"propertyToAddSystemName_string": {
			"description": "The system name of the property to add to the record.",
			"title": "to add Name",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveRecordSchemas",
				"value-collection": "formattedProperties",
				"value-path": "systemName",
				"value-title": "label"
			},
			"x-ms-visibility": "important"
		},
		"propertySystemName_string": {
			"description": "The system name of the property.",
			"title": "Name",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveRecordSchemas",
				"value-collection": "formattedProperties",
				"value-path": "systemName",
				"value-title": "label"
			},
			"x-ms-visibility": "important"
		},
		"propertyType_string": {
			"description": "The data type of the property.",
			"enum": [
				"string",
				"number",
				"boolean",
				"date",
				"monetary_amount",
				"email",
				"clause",
				"address",
				"duration"
			],
			"title": "Type",
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Text",
					"value": "string"
				},
				{
					"displayName": "Number",
					"value": "number"
				},
				{
					"displayName": "Yes/No",
					"value": "boolean"
				},
				{
					"displayName": "Date",
					"value": "date"
				},
				{
					"displayName": "Monetary Amount",
					"value": "monetary_amount"
				},
				{
					"displayName": "Email",
					"value": "email"
				},
				{
					"displayName": "Clause",
					"value": "clause"
				},
				{
					"displayName": "Address",
					"value": "address"
				},
				{
					"displayName": "Duration",
					"value": "duration"
				}
			],
			"x-ms-visibility": "important"
		},
		"propertyValue_dynamic": {
			"description": "The value of the property.",
			"title": "Value",
			"x-ms-visibility": "important"
		},
		"reactions_array": {
			"description": "Reactions to the comment.",
			"items": {
				"$ref": "#/definitions/reactions_object"
			},
			"title": "Reactions",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"reactions_object": {
			"description": "A reaction to the comment.",
			"properties": {
				"emojiId": {
					"$ref": "#/definitions/emojiId_string"
				},
				"reactors": {
					"$ref": "#/definitions/reactors_array"
				}
			},
			"title": "Reaction",
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"reactor_object": {
			"description": "A user who reacted to the comment.",
			"properties": {
				"displayName": {
					"$ref": "#/definitions/userDisplayName_string"
				},
				"id": {
					"$ref": "#/definitions/userId_string"
				}
			},
			"title": "Reactor",
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"reactors_array": {
			"description": "Users who reacted to the comment.",
			"items": {
				"$ref": "#/definitions/reactor_object"
			},
			"title": "Reactors",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"recordAddChildren_array": {
			"description": "List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.",
			"items": {
				"$ref": "#/definitions/recordAddChildrenPost_object"
			},
			"title": "Add Children",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordAddChildrenPost_object": {
			"description": "Object containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordAddChildrenPostRecordID_string"
				}
			},
			"title": "Add Child Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordAddChildrenPostRecordID_string": {
			"description": "The Record ID or Ironclad ID of the record to be set as a child record of the current record.",
			"title": "ID",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListAllRecords",
				"parameters": {
					"page": 0,
					"pageSize": 100,
					"sortDirection": "DESC",
					"sortField": "lastUpdated"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "ironcladId"
			},
			"x-ms-visibility": "important"
		},
		"recordAddLinkRecordPost_object": {
			"description": "Object containing the Record IDs or Ironclad IDs of the records to link.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordAddLinksPostRecordID_string"
				}
			},
			"title": "Add Link Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordAddLinks_array": {
			"description": "List of objects containing the Record IDs or Ironclad IDs of the records to link.",
			"items": {
				"$ref": "#/definitions/recordAddLinkRecordPost_object"
			},
			"title": "Add Links",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordAddLinksPostRecordID_string": {
			"description": "The Record ID or Ironclad ID of the record to link.",
			"title": "ID",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListAllRecords",
				"parameters": {
					"page": 0,
					"pageSize": 100,
					"sortDirection": "DESC",
					"sortField": "lastUpdated"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "ironcladId"
			},
			"x-ms-visibility": "important"
		},
		"recordAttachmentsAsArrayScriptGet_array": {
			"description": "The attachments of the record.",
			"items": {
				"properties": {
					"displayName": {
						"$ref": "#/definitions/attachmentDisplayName_string"
					},
					"key": {
						"$ref": "#/definitions/documentKey_string"
					},
					"name": {
						"$ref": "#/definitions/attachmentName_string"
					}
				},
				"title": "Attachment",
				"type": "object",
				"x-ms-visibility": "internal"
			},
			"title": "Attachments as Array",
			"type": "array"
		},
		"recordAttachmentsGet_object": {
			"description": "The attachments on this record.",
			"title": "Attachments",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"recordAttachmentsFormatted_object": {
			"type": "object",
			"title": "Attachment",
			"description": "An attachment of the record schema.",
			"x-ms-visibility": "important",
			"properties": {
				"systemName": {
					"$ref": "#/definitions/attachmentDisplayName_string"
				},
				"displayName": {
					"$ref": "#/definitions/attachmentName_string"
				}
			}
		},
		"recordAttachmentsFormatted_array": {
			"title": "Formatted Attachments",
			"description": "The formatted attachments of the record schema.",
			"type": "array",
			"x-ms-visibility": "important",
			"items": {
				"$ref": "#/definitions/recordAttachmentsFormatted_object"
			}
		},
		"recordAttachmentsInternalGet_object": {
			"description": "The attachments on this record.",
			"title": "Attachments",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"recordChildIdGet_string": {
			"description": "The identifier of the child record.",
			"title": "Child Record ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordChildIdsGet_array": {
			"description": "Child records in the repository.",
			"items": {
				"$ref": "#/definitions/recordChildIdGet_string"
			},
			"title": "Child Records",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"recordChildrenPost_array": {
			"description": "List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.",
			"items": {
				"$ref": "#/definitions/recordAddChildrenPost_object"
			},
			"title": "Children",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordGetDynamic_object": {
			"description": "A record and its associated data.",
			"properties": {
				"attachments": {
					"$ref": "#/definitions/recordAttachmentsInternalGet_object"
				},
				"attachmentsAsArray": {
					"$ref": "#/definitions/recordAttachmentsAsArrayScriptGet_array"
				},
				"childIds": {
					"$ref": "#/definitions/recordChildIdsGet_array"
				},
				"formattedProperties": {
					"description": "The OpenAPI formatted properties of the record.",
					"title": "Formatted Properties",
					"type": "object",
					"x-ms-dynamic-properties": {
						"itemValuePath": "formattedSchema",
						"operationId": "RetrieveRecord",
						"parameters": {
							"Record": {
								"parameterReference": "Record"
							}
						}
					},
					"x-ms-dynamic-schema": {
						"operationId": "RetrieveRecord",
						"parameters": {
							"Record": {
								"parameter": "Record"
							}
						},
						"value-path": "formattedSchema"
					},
					"x-ms-visibility": "important"
				},
				"formattedSchema": {
					"$ref": "#/definitions/recordSchemaFormatted_object"
				},
				"id": {
					"$ref": "#/definitions/recordId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/recordIroncladId_string"
				},
				"lastUpdated": {
					"$ref": "#/definitions/lastUpdated_string"
				},
				"links": {
					"$ref": "#/definitions/recordLinksGet_array"
				},
				"name": {
					"$ref": "#/definitions/recordName_string"
				},
				"parentId": {
					"$ref": "#/definitions/recordParentGet_string"
				},
				"propertiesAsArray": {
					"$ref": "#/definitions/recordPropertiesAsArrayGet_array"
				},
				"recordType": {
					"$ref": "#/definitions/recordTypeGet_string"
				},
				"source": {
					"$ref": "#/definitions/recordSource_object"
				}
			},
			"title": "Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordGetStatic_object": {
			"description": "A record and its associated data.",
			"properties": {
				"counterpartyName": {
					"$ref": "#/definitions/counterpartyNameGet_string"
				},
				"attachments": {
					"$ref": "#/definitions/recordAttachmentsGet_object"
				},
				"childIds": {
					"$ref": "#/definitions/recordChildIdsGet_array"
				},
				"id": {
					"$ref": "#/definitions/recordId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/recordIroncladId_string"
				},
				"lastUpdated": {
					"$ref": "#/definitions/lastUpdated_string"
				},
				"links": {
					"$ref": "#/definitions/recordLinksGet_array"
				},
				"name": {
					"$ref": "#/definitions/recordName_string"
				},
				"parentId": {
					"$ref": "#/definitions/recordParentGet_string"
				},
				"properties": {
					"$ref": "#/definitions/recordPropertiesGet_object"
				},
				"recordType": {
					"$ref": "#/definitions/recordTypeGet_string"
				},
				"source": {
					"$ref": "#/definitions/recordSource_object"
				},
				"label": {
					"$ref": "#/definitions/recordLabelGet_string"
				}
			},
			"title": "Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordGetFormatted_object": {
			"description": "A record and its associated data.",
			"properties": {
				"counterpartyName": {
					"$ref": "#/definitions/counterpartyNameGet_string"
				},
				"attachments": {
					"$ref": "#/definitions/recordAttachmentsGet_object"
				},
				"childIds": {
					"$ref": "#/definitions/recordChildIdsGet_array"
				},
				"id": {
					"$ref": "#/definitions/recordId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/recordIroncladId_string"
				},
				"lastUpdated": {
					"$ref": "#/definitions/lastUpdated_string"
				},
				"links": {
					"$ref": "#/definitions/recordLinksGet_array"
				},
				"name": {
					"$ref": "#/definitions/recordName_string"
				},
				"parentId": {
					"$ref": "#/definitions/recordParentGet_string"
				},
				"formattedProperties": {
					"description": "The OpenAPI formatted properties of the record.",
					"title": "Formatted Properties",
					"type": "object",
					"x-ms-dynamic-properties": {
						"itemValuePath": "formattedSchema",
						"operationId": "RetrieveRecordSchemas",
						"parameters": {
							"recordPorperties": {
								"parameterReference": "recordPorperties"
							}
						}
					},
					"x-ms-dynamic-schema": {
						"operationId": "RetrieveRecordSchemas",
						"parameters": {
							"recordPorperties": {
								"parameter": "recordPorperties"
							}
						},
						"value-path": "formattedSchema"
					},
					"x-ms-visibility": "important"
				},
				"recordType": {
					"$ref": "#/definitions/recordTypeGet_string"
				},
				"source": {
					"$ref": "#/definitions/recordSource_object"
				},
				"label": {
					"$ref": "#/definitions/recordLabelGet_string"
				}
			},
			"title": "Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordIroncladId_string": {
			"description": "The Ironclad ID of the record.",
			"title": "Ironclad ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordId_string": {
			"description": "The identifier of the repository record.",
			"title": "ID",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListAllRecords",
				"parameters": {
					"page": 0,
					"pageSize": 100,
					"sortDirection": "DESC",
					"sortField": "lastUpdated"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "ironcladId"
			},
			"x-ms-visibility": "important"
		},
		"recordLabelGet_string": {
			"description": "The display label of the record.",
			"title": "Label",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordLinkGet_object": {
			"description": "An object containing the Record ID of a record related of the current record.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordLinkIdGet_string"
				}
			},
			"title": "Related Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordLinkIdGet_string": {
			"description": "The identifier of the related record.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordLinkPost_object": {
			"description": "An object containing the Record ID or Ironclad ID of the record to be set as related of the current record.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordAddLinksPostRecordID_string"
				}
			},
			"title": "Related Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordLinksGet_array": {
			"description": "List of objects containing the Record IDs of the records related of the current record.",
			"items": {
				"$ref": "#/definitions/recordLinkGet_object"
			},
			"title": "Related Records",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordLinksPost_array": {
			"description": "List of objects containing the Record IDs or Ironclad IDs of the records to be set as related of the current record.",
			"items": {
				"$ref": "#/definitions/recordLinkPost_object"
			},
			"title": "Related Records",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordName_string": {
			"description": "The name of the repository record.",
			"title": "Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordParentGet_string": {
			"description": "The parent record in the repository.",
			"title": "Parent Record ID",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"recordParentPost_object": {
			"description": "Object containing the Record ID or Ironclad ID of the record to be set as the parent of the current record.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordId_string"
				}
			},
			"required": [
				"recordId"
			],
			"title": "Parent Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordPost_object": {
			"description": "A record and its associated data.",
			"properties": {
				"name": {
					"$ref": "#/definitions/recordName_string"
				},
				"type": {
					"$ref": "#/definitions/recordTypePost_string"
				},
				"propertiesAsArray": {
					"$ref": "#/definitions/recordPropertiesAsArrayPost_array"
				},
				"children": {
					"$ref": "#/definitions/recordChildrenPost_array"
				},
				"links": {
					"$ref": "#/definitions/recordLinksPost_array"
				},
				"parent": {
					"$ref": "#/definitions/recordParentPost_object"
				}
			},
			"required": [
				"name",
				"type",
				"propertiesAsArray"
			],
			"title": "Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordPropertiesAsArrayAttributesGet_object": {
			"description": "The attributes of the property.",
			"properties": {
				"type": {
					"$ref": "#/definitions/propertyDataType_string"
				},
				"value": {
					"$ref": "#/definitions/propertyValue_dynamic"
				}
			},
			"title": "Property Attributes",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordPropertiesAsArrayGet_array": {
			"description": "The properties of the record as an array.",
			"items": {
				"$ref": "#/definitions/recordPropertiesAsArrayGet_object"
			},
			"title": "Properties as Array",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordPropertiesAsArrayGet_object": {
			"description": "A record property.",
			"properties": {
				"propertyAttributes": {
					"$ref": "#/definitions/recordPropertiesAsArrayAttributesGet_object"
				},
				"propertySystemName": {
					"$ref": "#/definitions/propertySystemName_string"
				}
			},
			"title": "Record Property",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"recordPropertiesToAddAsArrayPost_array": {
			"description": "The properties of the record.",
			"items": {
				"$ref": "#/definitions/recordPropertiesToAddPostAsArray_object"
			},
			"title": "Add Properties",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordPropertiesAsArrayPost_array": {
			"description": "The properties of the record.",
			"items": {
				"$ref": "#/definitions/recordPropertiesPostAsArray_object"
			},
			"title": "Properties",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordPropertiesFormatted_array": {
			"title": "Formatted Properties",
			"description": "The formatted properties of the record schema.",
			"type": "array",
			"x-ms-visibility": "important",
			"items": {
				"type": "object",
				"title": "Formatted Property",
				"description": "A property of the record schema.",
				"x-ms-visibility": "important",
				"properties": {
					"systemName": {
						"$ref": "#/definitions/propertySystemName_string"
					},
					"displayName": {
						"$ref": "#/definitions/recordPropertyDisplayName_string"
					},
					"type": {
						"$ref": "#/definitions/recordPropertyType_string"
					},
					"visible": {
						"$ref": "#/definitions/recordPropertyvisible_boolean"
					},
					"resolvesTo": {
						"$ref": "#/definitions/recordPropertyResolvesTo_string"
					},
					"label": {
						"$ref": "#/definitions/recordPropertyLabel_string"
					}
				}
			}
		},
		"recordPropertiesGet_object": {
			"description": "The properties of the record.",
			"title": "Properties",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"recordPropertiesToAddPostAsArray_object": {
			"description": "A record property to add.",
			"properties": {
				"propertySystemName": {
					"$ref": "#/definitions/propertyToAddSystemName_string"
				},
				"value": {
					"$ref": "#/definitions/propertyValue_dynamic"
				}
			},
			"required": [
				"propertySystemName",
				"value"
			],
			"title": "Property",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordPropertiesPostAsArray_object": {
			"description": "A record property.",
			"properties": {
				"propertySystemName": {
					"$ref": "#/definitions/propertySystemName_string"
				},
				"value": {
					"$ref": "#/definitions/propertyValue_dynamic"
				}
			},
			"required": [
				"propertySystemName",
				"value"
			],
			"title": "Property",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordPropertyDisplayName_string": {
			"description": "The display name of the property.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordPropertyType_string": {
			"description": "The type of the property.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordPropertyvisible_boolean": {
			"description": "Whether the property is visible.",
			"title": "Visible",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"recordPropertyResolvesTo_string": {
			"description": "The resolves to of the property.",
			"title": "Resolves To",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordPropertyLabel_string": {
			"description": "The label of the property.",
			"title": "Label",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordRemoveChildren_array": {
			"description": "List of objects containing the Record IDs or Ironclad IDs of the child records to remove.",
			"items": {
				"$ref": "#/definitions/recordRemoveChildrenPost_object"
			},
			"title": "Remove Children",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordRemoveChildrenPost_object": {
			"description": "Object containing the Record IDs or Ironclad IDs of the child records to remove.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordRemoveChildrenPostRecordID_string"
				}
			},
			"title": "Remove Child Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordRemoveChildrenPostRecordID_string": {
			"description": "The Record ID or Ironclad ID of the child record to be removed from the current record.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordRemoveLinks_array": {
			"description": "List of objects containing the Record IDs or Ironclad IDs of the record links to remove.",
			"items": {
				"$ref": "#/definitions/recordRemoveLinksPost_object"
			},
			"title": "Remove Links",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordRemoveLinksPost_object": {
			"description": "Object containing the Record IDs or Ironclad IDs of the record links to remove.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordRemoveLinksPostRecordID_string"
				}
			},
			"title": "Remove Link Record",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordRemoveLinksPostRecordID_string": {
			"description": "The Record ID or Ironclad ID of the record links to remove.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordRemoveParent_boolean": {
			"description": "If true, the parent id should be removed for the current record.",
			"title": "Remove Parent",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"recordRemoveProperties_array": {
			"description": "An array of properties to remove",
			"items": {
				"$ref": "#/definitions/recordRemoveProperty_string"
			},
			"title": "Remove Properties",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"recordRemoveProperty_string": {
			"description": "The name of the property to remove",
			"title": "Property to remove Name",
			"type": "string",
			"x-ms-visibility": "important",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveRecordSchemas",
				"value-collection": "formattedProperties",
				"value-path": "systemName",
				"value-title": "label"
			}
		},
		"recordSchemaFormatted_object": {
			"title": "Formatted Schema",
			"type": "object",
			"x-ms-visibility": "advanced",
			"description": "The formatted schema (if requested by adding a properties query)."
		},
		"recordSchemaPropertiesGet_object": {
			"description": "The schema properties as a dictionary.",
			"title": "Properties Dictionary",
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"recordSetParent_object": {
			"description": "Object containing Record IDs or Ironclad IDs to be set as the parent of the current record.",
			"properties": {
				"recordId": {
					"$ref": "#/definitions/recordId_string"
				}
			},
			"title": "Parent",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"recordsGetFormatted_array": {
			"description": "The records matching the query.",
			"items": {
				"$ref": "#/definitions/recordGetFormatted_object"
			},
			"title": "Records",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"recordSource_object": {
			"description": "The source of the record.",
			"title": "Source",
			"properties": {
				"type": {
					"$ref": "#/definitions/recordSourceType_string"
				},
				"workflowId": {
					"$ref": "#/definitions/uniqueId_string"
				}
			},
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"recordSourceType_string": {
			"description": "The type of the source.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordTypeDescription_string": {
			"description": "The description of the record type.",
			"title": "Description",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordTypeDisplayName_string": {
			"description": "The display name of the record type.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordTypeGet_string": {
			"description": "The system name of the record type.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"recordTypePost_string": {
			"description": "The type of the record.",
			"title": "Type",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveRecordSchemas",
				"value-collection": "formattedRecordTypes",
				"value-path": "systemName",
				"value-title": "displayName"
			},
			"x-ms-visibility": "important"
		},
		"recordTypesDictionary_object": {
			"description": "A dictionary of record types available in this instance.",
			"title": "Record Types Dictionary",
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"recordTypesFormatted_array": {
			"title": "Record Types",
			"description": "The formatted record types of the record schema.",
			"type": "array",
			"x-ms-visibility": "important",
			"items": {
				"$ref": "#/definitions/recordTypesFormatted_object"
			}
		},
		"recordTypesFormatted_object": {
			"title": "Record Type",
			"description": "A record type of the record schema.",
			"type": "object",
			"x-ms-visibility": "important",
			"properties": {
				"systemName": {
					"$ref": "#/definitions/recordTypeGet_string"
				},
				"displayName": {
					"$ref": "#/definitions/recordTypeDisplayName_string"
				},
				"description": {
					"$ref": "#/definitions/recordTypeDescription_string"
				}
			}
		},
		"remainingCredits_integer": {
			"description": "The number of credits remaining after the operation.",
			"title": "Remaining Credits",
			"type": "integer",
			"x-ms-visibility": "important"
		},
		"repliedToActivityFeedMessageId_string": {
			"description": "The identifier of the activity feed message that this message is a reply to.",
			"title": "Replied To Activity Feed Message ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"requestedProperties_string": {
			"title": "Requested Properties",
			"type": "string",
			"x-ms-visibility": "advanced",
			"description": "The properties requested in the query."
		},
		"reviewRollbacked_boolean": {
			"description": "If true, the workflow was reverted to review.",
			"title": "Reverted to Review",
			"type": "boolean",
			"x-ms-visibility": "advanced"
		},
		"routingOrder_integer": {
			"description": "The routing order of the signer.",
			"format": "int32",
			"title": "Routing Order",
			"type": "integer",
			"x-ms-visibility": "important"
		},
		"schemaProperties_object": {
			"description": "The properties of the schema.",
			"title": "Properties",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimActive_boolean": {
			"description": "If true, the user's account is active.",
			"title": "Active",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"scimEmail_object": {
			"description": "An email object of the user.",
			"properties": {
				"primary": {
					"$ref": "#/definitions/scimEmailPrimaryGet_boolean"
				},
				"type": {
					"$ref": "#/definitions/scimEmailTypeGet_string"
				},
				"value": {
					"$ref": "#/definitions/userEmail_string"
				}
			},
			"title": "Email Object",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimEmailPrimaryGet_boolean": {
			"description": "If true, this is the preferred email of the user.",
			"title": "Primary",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"scimEmails_array": {
			"description": "The emails of the user.",
			"items": {
				"$ref": "#/definitions/scimEmail_object"
			},
			"title": "Emails",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"scimEmailTypeGet_string": {
			"description": "The type of email.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimGroupDisplayName_string": {
			"description": "The display name of the group.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimGroupGet_object": {
			"description": "A group resource in SCIM format.",
			"properties": {
				"displayName": {
					"$ref": "#/definitions/scimGroupDisplayName_string"
				},
				"externalId": {
					"$ref": "#/definitions/groupExternalId_string"
				},
				"id": {
					"$ref": "#/definitions/groupId_string"
				},
				"members": {
					"$ref": "#/definitions/scimGroupMembersGet_array"
				},
				"schemas": {
					"$ref": "#/definitions/scimSchemasGet_array"
				}
			},
			"title": "Group",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimGroupMemberGet_object": {
			"description": "A member of the group.",
			"properties": {
				"type": {
					"$ref": "#/definitions/groupMemberType_string"
				},
				"value": {
					"$ref": "#/definitions/userId_string"
				}
			},
			"title": "Member",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimGroupMemberPost_object": {
			"description": "The member of the group to be added.",
			"properties": {
				"value": {
					"$ref": "#/definitions/userId_string"
				}
			},
			"title": "Member",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimGroupMembersGet_array": {
			"description": "The members of the group.",
			"items": {
				"$ref": "#/definitions/scimGroupMemberGet_object"
			},
			"title": "Members",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"scimGroupMembersPost_array": {
			"description": "The members to be added to the group.",
			"items": {
				"$ref": "#/definitions/scimGroupMemberPost_object"
			},
			"title": "Members",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"scimGroupOperations_array": {
			"items": {
				"properties": {
					"op": {
						"$ref": "#/definitions/scimOp_string"
					},
					"path": {
						"$ref": "#/definitions/scimGroupPath_string"
					},
					"value": {
						"$ref": "#/definitions/scimGroupPatchOpValue_dynamic"
					}
				},
				"required": [
					"op",
					"path",
					"value"
				],
				"type": "object"
			},
			"title": "Operations",
			"type": "array"
		},
		"scimGroupPatchOpValue_dynamic": {
			"description": "The value you wish to use for 'add' or 'replace' operations. The 'remove' operation does not take the 'value' parameter. To add or remove a user from a group, use the users identifier in an object with a key called 'value'.",
			"title": "Value",
			"x-ms-visibility": "important"
		},
		"scimGroupPath_string": {
			"description": "The path of the attribute that you wish to change.",
			"enum": [
				"members",
				"displayName",
				"externalId"
			],
			"x-ms-enum-values": [
				{
					"displayName": "Members",
					"value": "members"
				},
				{
					"displayName": "Display Name",
					"value": "displayName"
				},
				{
					"displayName": "External ID",
					"value": "externalId"
				}
			],
			"title": "Path",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimGroupResourcesGet_array": {
			"description": "The list of resources returned by the list or query operation.",
			"items": {
				"$ref": "#/definitions/scimGroupGet_object"
			},
			"title": "Resources",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"scimGroupSchemasPost_array": {
			"description": "The lists of schemas to be applied.",
			"items": {
				"$ref": "#/definitions/scimGroupSchemaPost_string"
			},
			"title": "SCIM Schemas",
			"type": "array",
			"x-ms-visibility": "internal"
		},
		"scimGroupSchemaPost_string": {
			"default": "urn:ietf:params:scim:schemas:core:2.0:Group",
			"description": "The SCIM schema for groups.",
			"title": "Schema",
			"type": "string",
			"x-ms-visibility": "internal"
		},
		"scimName_object": {
			"description": "The components of the user's real name.",
			"properties": {
				"familyName": {
					"$ref": "#/definitions/familyName_string"
				},
				"givenName": {
					"$ref": "#/definitions/givenName_string"
				}
			},
			"required": [
				"familyName",
				"givenName"
			],
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimOp_string": {
			"description": "The operation to perform on the user.",
			"enum": [
				"add",
				"remove",
				"replace"
			],
			"title": "Operation",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimPassword_string": {
			"description": "The password of the user.",
			"title": "Password",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimPatchOpSchemaPost_string": {
			"default": "urn:ietf:params:scim:api:messages:2.0:PatchOp",
			"description": "The SCIM schema for patchops.",
			"title": "Schema",
			"type": "string",
			"x-ms-visibility": "internal"
		},
		"scimPatchOpSchemasPost_array": {
			"description": "The lists of schemas to be applied.",
			"items": {
				"$ref": "#/definitions/scimPatchOpSchemaPost_string"
			},
			"title": "internal",
			"type": "array",
			"x-ms-visibility": "internal"
		},
		"scimSchemaGet_object": {
			"description": "A schema supported by the response.",
			"title": "internal",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimSchemasGet_array": {
			"description": "The list of supported schemas.",
			"items": {
				"$ref": "#/definitions/scimSchemaGet_object"
			},
			"title": "internal",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"scimTitle_string": {
			"description": "The title of the user.",
			"title": "Title",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"scimUserGet_object": {
			"description": "A user resource in SCIM format.",
			"properties": {
				"active": {
					"$ref": "#/definitions/scimActive_boolean"
				},
				"displayName": {
					"$ref": "#/definitions/userDisplayName_string"
				},
				"emails": {
					"$ref": "#/definitions/scimEmails_array"
				},
				"id": {
					"$ref": "#/definitions/userId_string"
				},
				"name": {
					"$ref": "#/definitions/scimName_object"
				},
				"schemas": {
					"$ref": "#/definitions/scimSchemasGet_array"
				},
				"title": {
					"$ref": "#/definitions/scimTitle_string"
				},
				"username": {
					"$ref": "#/definitions/username_string"
				},
				"combinedLabel": {
					"$ref": "#/definitions/userLabel_string"
				}
			},
			"title": "User",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"scimUserOperations_array": {
			"items": {
				"properties": {
					"op": {
						"$ref": "#/definitions/scimOp_string"
					},
					"path": {
						"$ref": "#/definitions/scimUserPath_string"
					},
					"value": {
						"$ref": "#/definitions/scimUserValue_string"
					}
				},
				"required": [
					"op",
					"path"
				],
				"type": "object"
			},
			"title": "Operations",
			"type": "array"
		},
		"scimUserPath_string": {
			"description": "The path of the attribute that you wish to change.",
			"enum": [
				"userName",
				"name.givenName",
				"name.familyName",
				"title",
				"emails"
			],
			"title": "Path",
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Username",
					"value": "userName"
				},
				{
					"displayName": "Given Name",
					"value": "name.givenName"
				},
				{
					"displayName": "Family Name",
					"value": "name.familyName"
				},
				{
					"displayName": "Title",
					"value": "title"
				},
				{
					"displayName": "Emails",
					"value": "emails"
				}
			],
			"x-ms-visibility": "important"
		},
		"scimUserResourcesGet_array": {
			"description": "The list of resources returned by the list or query operation.",
			"items": {
				"$ref": "#/definitions/scimUserGet_object"
			},
			"title": "Resources",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"scimUserSchemaPost_string": {
			"default": "urn:ietf:params:scim:schemas:core:2.0:User",
			"description": "The SCIM schema for users.",
			"title": "Schema",
			"type": "string",
			"x-ms-visibility": "internal"
		},
		"scimUserSchemasPost_array": {
			"description": "The lists of schemas to be applied.",
			"items": {
				"$ref": "#/definitions/scimUserSchemaPost_string"
			},
			"title": "SCIM Schemas",
			"type": "array",
			"x-ms-visibility": "internal"
		},
		"scimUserValue_string": {
			"description": "The value you wish to use for 'add' or 'replace' operations. The 'remove' operation does not take the 'value' parameter.",
			"title": "Value",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"sentSignaturePacket_array": {
			"description": "If available, the documents sent in the signature packet.",
			"items": {
				"$ref": "#/definitions/workflowDocument_object"
			},
			"title": "Signature Packet",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"startIndex_integer": {
			"default": 1,
			"description": "The starting index for retrieving this resource. Resources are indexed based on when they were first added to Ironclad.",
			"example": 1,
			"title": "Start Index",
			"type": "integer",
			"x-ms-visibility": "important"
		},
		"state_string": {
			"description": "",
			"title": "State",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"templateId_string": {
			"description": "The identifier of the workflow template.",
			"title": "Template",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListWorkflowSchemas",
				"parameters": {
					"form": "launch"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "name"
			},
			"x-ms-visibility": "important"
		},
		"templateTitle_string": {
			"description": "The title of the workflow template.",
			"title": "Template Title",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"timestamp_string": {
			"description": "The date and time of the event.",
			"title": "Timestamp",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"totalResults_integer": {
			"description": "The total number of results returned by the list or query operation.",
			"example": 1,
			"title": "Total Results",
			"type": "integer",
			"x-ms-visibility": "important"
		},
		"triggerPayload_object": {
			"description": "The contents of the trigger payload.",
			"properties": {
				"event": {
					"$ref": "#/definitions/event_string"
				},
				"templateID": {
					"$ref": "#/definitions/templateId_string"
				},
				"workflowID": {
					"$ref": "#/definitions/uniqueId_string"
				}
			},
			"title": "Trigger Payload",
			"type": "object",
			"x-ms-visibility": "advanced"
		},
		"turnEndTime_string": {
			"description": "The date and time the turn ended.",
			"title": "Turn End Time",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"turnHistory_array": {
			"description": "The turn history of the workflow",
			"items": {
				"description": "A turn in the workflow history.",
				"properties": {
					"turnEndTime": {
						"$ref": "#/definitions/turnEndTime_string"
					},
					"turnLocation": {
						"$ref": "#/definitions/turnLocation_string"
					},
					"turnNumber": {
						"$ref": "#/definitions/turnNumber_integer"
					},
					"turnParty": {
						"$ref": "#/definitions/turnParty_string"
					},
					"turnStartTime": {
						"$ref": "#/definitions/turnStartTime_string"
					},
					"turnUser": {
						"$ref": "#/definitions/userId_string"
					},
					"turnUserEmail": {
						"$ref": "#/definitions/userEmail_string"
					}
				},
				"title": "Turn",
				"type": "object",
				"x-ms-visibility": "important"
			},
			"title": "Turn History",
			"type": "array"
		},
		"turnLocation_string": {
			"description": "The location of the turn.",
			"title": "Turn Location",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"turnNumber_integer": {
			"description": "The number of the turn.",
			"title": "Turn Number",
			"type": "integer",
			"x-ms-visibility": "important"
		},
		"turnParty_string": {
			"description": "The party that took the turn.",
			"title": "Turn Party",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"turnStartTime_string": {
			"description": "The date and time the turn started.",
			"title": "Turn Start Time",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"uniqueId_string": {
			"description": "The unique identifier.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"uploadSignedGet_object": {
			"description": "The signed document.",
			"properties": {
				"signed": {
					"$ref": "#/definitions/workflowDocument_object"
				},
				"title": {
					"$ref": "#/definitions/workflowTitle_string"
				},
				"workflowId": {
					"$ref": "#/definitions/uniqueId_string"
				}
			},
			"title": "Upload Signed",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"userCompanyName_string": {
			"description": "Company name of the author.",
			"title": "Company Name",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"userContactNumber_string": {
			"description": "The listed contact number of the user.",
			"title": "Contact Number",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"userDepartment_string": {
			"description": "The listed department of the user.",
			"title": "Department",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"userDisplayName_string": {
			"description": "The display name of the user.",
			"title": "Display Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"userEmail_string": {
			"description": "An email address of the Ironclad user.",
			"title": "Email",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListUsers",
				"parameters": {
					"count": 100,
					"startIndex": 1
				},
				"value-collection": "Resources",
				"value-path": "username",
				"value-title": "combinedLabel"
			},
			"x-ms-visibility": "important"
		},
		"userId_string": {
			"description": "The user ID of the Ironclad user.",
			"title": "ID",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListUsers",
				"parameters": {
					"count": 100,
					"startIndex": 1
				},
				"value-collection": "Resources",
				"value-path": "id",
				"value-title": "combinedLabel"
			},
			"x-ms-visibility": "important"
		},
		"userLabel_string": {
			"title": "Combined Label",
			"type": "string",
			"x-ms-visibility": "advanced",
			"description": "A label combining the user's full name and email address."
		},
		"userIdentificationAttribute_string": {
			"default": "email",
			"description": "The type of value used to identify the user.",
			"enum": [
				"email",
				"id"
			],
			"title": "Attribute",
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "User Email",
					"value": "email"
				},
				{
					"displayName": "User ID",
					"value": "id"
				}
			],
			"x-ms-visibility": "important"
		},
		"userLastUsageTrack_string": {
			"description": "The date and time the user was last seen.",
			"title": "Last User Track",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"username_string": {
			"description": "The email of the user during account creation.",
			"title": "Username",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"userPost_object": {
			"description": "An Ironclad user.",
			"properties": {
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"id": {
					"$ref": "#/definitions/userId_string"
				},
				"type": {
					"$ref": "#/definitions/userIdentificationAttribute_string"
				}
			},
			"title": "User",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"userPronoun_string": {
			"description": "The listed pronoun(s) of the user.",
			"title": "Pronoun(s)",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"userTitle_string": {
			"description": "The job title of the user.",
			"title": "Title",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"userType_string": {
			"description": "Type of the user.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"userUsername_string": {
			"description": "The username of the user.",
			"title": "Username",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"webhookConfiguration_object": {
			"description": "A webhook configuration.",
			"properties": {
				"company": {
					"$ref": "#/definitions/companyId_string"
				},
				"events": {
					"$ref": "#/definitions/webhookEvents_array"
				},
				"id": {
					"$ref": "#/definitions/webhookId_string"
				},
				"targetURL": {
					"$ref": "#/definitions/webhookTargetUrlGet_string"
				}
			},
			"title": "Webhook Configuration",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"webhookEvent_string": {
			"default": "workflow_updated",
			"enum": [
				"workflow_updated",
				"workflow_launched",
				"workflow_cancelled",
				"workflow_completed",
				"workflow_approval_status_changed",
				"workflow_attribute_updated",
				"workflow_comment_reaction_added",
				"workflow_comment_reaction_removed",
				"workflow_comment_added",
				"workflow_comment_removed",
				"workflow_comment_updated",
				"workflow_counterparty_invite_sent",
				"workflow_counterparty_invite_revoked",
				"workflow_documents_added",
				"workflow_documents_removed",
				"workflow_documents_updated",
				"workflow_documents_renamed",
				"workflow_document_edited",
				"workflow_paused",
				"workflow_resumed",
				"workflow_signature_packet_sent",
				"workflow_signature_packet_uploaded",
				"workflow_signature_packet_cancelled"
			],
			"title": "Trigger Event",
			"description": "The event that triggers the webhook.",
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Workflow Updated",
					"value": "workflow_updated"
				},
				{
					"displayName": "Workflow Launched",
					"value": "workflow_launched"
				},
				{
					"displayName": "Workflow Cancelled",
					"value": "workflow_cancelled"
				},
				{
					"displayName": "Workflow Completed",
					"value": "workflow_completed"
				},
				{
					"displayName": "Approval Status Changed",
					"value": "workflow_approval_status_changed"
				},
				{
					"displayName": "Workflow Attributes Updated",
					"value": "workflow_attribute_updated"
				},
				{
					"displayName": "Comment Reaction Added",
					"value": "workflow_comment_reaction_added"
				},
				{
					"displayName": "Comment Reaction Removed",
					"value": "workflow_comment_reaction_removed"
				},
				{
					"displayName": "Comment Added",
					"value": "workflow_comment_added"
				},
				{
					"displayName": "Comment Removed",
					"value": "workflow_comment_removed"
				},
				{
					"displayName": "Comment Updated",
					"value": "workflow_comment_updated"
				},
				{
					"displayName": "Counterparty Invite Sent",
					"value": "workflow_counterparty_invite_sent"
				},
				{
					"displayName": "Counterparty Invite Revoked",
					"value": "workflow_counterparty_invite_revoked"
				},
				{
					"displayName": "Workflow Document Added",
					"value": "workflow_documents_added"
				},
				{
					"displayName": "Workflow Document Removed",
					"value": "workflow_documents_removed"
				},
				{
					"displayName": "Workflow Document Updated",
					"value": "workflow_documents_updated"
				},
				{
					"displayName": "Workflow Document Edited",
					"value": "workflow_document_edited"
				},
				{
					"displayName": "Workflow Paused",
					"value": "workflow_paused"
				},
				{
					"displayName": "Workflow Resumed",
					"value": "workflow_resumed"
				},
				{
					"displayName": "Signature Packet Sent",
					"value": "workflow_signature_packet_sent"
				},
				{
					"displayName": "Signature Packet Uploaded",
					"value": "workflow_signature_packet_uploaded"
				},
				{
					"displayName": "Signature Packet Cancelled",
					"value": "workflow_signature_packet_cancelled"
				}
			],
			"x-ms-visibility": "important"
		},
		"webhookEvents_array": {
			"description": "The trigger events for the Workflow.",
			"items": {
				"$ref": "#/definitions/webhookEvent_string"
			},
			"title": "Events",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"webhookId_string": {
			"description": "The identifier of the registered webhook.",
			"title": "Webhook ID",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"webhookNotificationContent_object": {
			"description": "The webhook data received from the event.",
			"properties": {
				"companyID": {
					"$ref": "#/definitions/instanceId_string"
				},
				"payload": {
					"$ref": "#/definitions/triggerPayload_object"
				},
				"timestamp": {
					"$ref": "#/definitions/timestamp_string"
				},
				"webhookID": {
					"$ref": "#/definitions/webhookId_string"
				}
			},
			"title": "Event Data",
			"type": "object"
		},
		"webhookTargetUrlGet_string": {
			"description": "targetURL",
			"title": "Target URL",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"webhookTargetUrlPost_string": {
			"description": "targetURL",
			"title": "Target URL",
			"type": "string",
			"x-ms-notification-url": true,
			"x-ms-visibility": "internal"
		},
		"workflowApproval_object": {
			"description": "The approval state of the workflow.",
			"properties": {
				"state": {
					"$ref": "#/definitions/state_string"
				}
			},
			"title": "Approvals",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowApprovalGroup_array": {
			"description": "An approval group in this workflow.",
			"items": {
				"$ref": "#/definitions/workflowApprovalGroup_object"
			},
			"title": "Approval Groups",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowApprovalGroup_object": {
			"description": "An approval group in this workflow.",
			"properties": {
				"reviewers": {
					"$ref": "#/definitions/workflowReviewers_array"
				}
			},
			"title": "Approval Group",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowAsyncLaunchStatus_string": {
			"description": "The status of the asynchronous job",
			"title": "Status",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowAttributeAction_object": {
			"description": "An update to an existing workflow attributes.",
			"properties": {
				"action": {
					"$ref": "#/definitions/workflowAttributeAction_string"
				},
				"path": {
					"$ref": "#/definitions/workflowAttributePath_string"
				},
				"value": {
					"$ref": "#/definitions/workflowAttributeValue_dynamic"
				}
			},
			"required": [
				"action",
				"path"
			],
			"title": "Update",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowAttributeAction_string": {
			"description": "The type of action you'd like to take on an existing attribute (read-only fields cannot be updated). Use the remove action to clear values. If using the remove action, the attribute cannot be required by the workflow.",
			"enum": [
				"set",
				"remove"
			],
			"title": "Action",
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Set",
					"value": "set"
				},
				{
					"displayName": "Remove",
					"value": "remove"
				}
			],
			"x-ms-visibility": "important"
		},
		"workflowAttributeActions_array": {
			"description": "The actions to take on the workflow attributes.",
			"items": {
				"$ref": "#/definitions/workflowAttributeAction_object"
			},
			"title": "Actions",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowAttributeActions_object": {
			"description": "The object describing the workflow metadata update.",
			"properties": {
				"comment": {
					"$ref": "#/definitions/commentText_string"
				},
				"updates": {
					"$ref": "#/definitions/workflowAttributeActions_array"
				}
			},
			"title": "Metadata Update",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowAttributePath_string": {
			"description": "The workflow attribute id that you'd like to make a change to.",
			"title": "Path",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveWorkflowSchema",
				"parameters": {
					"Schema": {
						"parameter": "configuration"
					},
					"form": "launch"
				},
				"value-collection": "schemaAsArray",
				"value-path": "systemName",
				"value-title": "displayName"
			},
			"x-ms-visibility": "important"
		},
		"workflowAttributesAsArrayGet_array": {
			"description": "A list of workflow attributes as an array.",
			"items": {
				"$ref": "#/definitions/workflowAttributesAsArrayObjectGet_object"
			},
			"title": "Workflow Attributes as Array",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowAttributesAsArrayObjectAttributesGet_dynamic": {
			"description": "The attributes of the workflow property.",
			"title": "Attributes",
			"x-ms-visibility": "important"
		},
		"workflowAttributesAsArrayObjectGet_object": {
			"description": "A workflow property.",
			"properties": {
				"propertyAttributes": {
					"$ref": "#/definitions/workflowAttributesAsArrayObjectAttributesGet_dynamic"
				},
				"propertySystemName": {
					"$ref": "#/definitions/propertySystemName_string"
				}
			},
			"title": "Workflow Property",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowAttributesGet_object": {
			"description": "The attributes of the workflow.",
			"properties": {
				"counterpartyName": {
					"$ref": "#/definitions/counterpartyNameGet_string"
				},
				"currentTurnParty": {
					"$ref": "#/definitions/turnParty_string"
				},
				"draft": {
					"$ref": "#/definitions/workflowDraftDocumentsGet_array"
				},
				"paperSource": {
					"$ref": "#/definitions/paperSourceGet_string"
				},
				"readableId": {
					"$ref": "#/definitions/workflowIroncladId_string"
				},
				"reviewRollbacked": {
					"$ref": "#/definitions/reviewRollbacked_boolean"
				},
				"sentSignaturePacket": {
					"$ref": "#/definitions/sentSignaturePacket_array"
				},
				"signed": {
					"$ref": "#/definitions/workflowSignedDocuments_object"
				}
			},
			"title": "Attributes",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"workflowAttributeValue_dynamic": {
			"description": "The value you'd like to set the attribute to.",
			"title": "Value",
			"x-ms-visibility": "important"
		},
		"workflowAsync_object": {
			"type": "object",
			"title": "Workflow",
			"description": "The workflow that was created asynchronously.",
			"x-ms-visibility": "important",
			"properties": {
				"id": {
					"$ref": "#/definitions/uniqueId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/workflowIroncladId_string"
				}
			}
		},
		"workflowDocument_object": {
			"description": "A draft document in the workflow.",
			"properties": {
				"documentVersion": {
					"$ref": "#/definitions/documentVersion_string"
				},
				"documentVersionNumber_number": {
					"$ref": "#/definitions/documentVersionNumber_number"
				},
				"download": {
					"$ref": "#/definitions/documentDownloadPath_string"
				},
				"filename": {
					"$ref": "#/definitions/documentFileName_string"
				},
				"key": {
					"$ref": "#/definitions/documentKey_string"
				},
				"lastModified": {
					"$ref": "#/definitions/documentLastModified_object"
				}
			},
			"title": "Document",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowDocumentsAsArrayGet_array": {
			"description": "The workflow documents as an array.",
			"items": {
				"$ref": "#/definitions/workflowDocumentsAsArrayObject_object"
			},
			"title": "Document Array",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowDocumentSchemaAsArrayGet_array": {
			"description": "The workflow document schema as an array.",
			"items": {
				"$ref": "#/definitions/workflowDocumentSchemaAsArrayObject_object"
			},
			"title": "Document Array",
			"type": "array",
			"x-ms-visibility": "internal"
		},
		"workflowDocumentsAsArrayObject_object": {
			"description": "A document in the workflow.",
			"properties": {
				"displayName": {
					"$ref": "#/definitions/documentDisplayName_string"
				},
				"readOnly": {
					"$ref": "#/definitions/propertyReadOnly_boolean"
				},
				"systemName": {
					"$ref": "#/definitions/documentSystemName_string"
				},
				"versions": {
					"$ref": "#/definitions/workflowDocumentVersions_array"
				}
			},
			"title": "Document",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowDocumentSchemaAsArrayObject_object": {
			"description": "A document in the workflow.",
			"properties": {
				"displayName": {
					"$ref": "#/definitions/documentDisplayName_string"
				},
				"readOnly": {
					"$ref": "#/definitions/propertyReadOnly_boolean"
				},
				"systemName": {
					"$ref": "#/definitions/documentSystemName_string"
				}
			},
			"title": "Document",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowDocumentVersion_object": {
			"description": "A version of the document.",
			"properties": {
				"filename": {
					"$ref": "#/definitions/documentFileName_string"
				},
				"version": {
					"$ref": "#/definitions/documentVersion_string"
				},
				"versionNumber": {
					"$ref": "#/definitions/documentVersionNumber_number"
				},
				"key": {
					"$ref": "#/definitions/documentKey_string"
				},
				"download": {
					"$ref": "#/definitions/documentDownloadPath_string"
				},
				"lastModified": {
					"$ref": "#/definitions/documentLastModified_object"
				}
			},
			"title": "Version",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowDocumentVersions_array": {
			"description": "The versions of the document.",
			"items": {
				"$ref": "#/definitions/workflowDocumentVersion_object"
			},
			"title": "Versions",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowDraftDocumentsGet_array": {
			"description": "If available, the draft documents in the workflow.",
			"items": {
				"$ref": "#/definitions/workflowDocument_object"
			},
			"title": "Document Drafts",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowEmailAttachment_object": {
			"description": "An attachment in the email.",
			"properties": {
				"contentType": {
					"$ref": "#/definitions/documentContentType_string"
				},
				"download": {
					"$ref": "#/definitions/documentDownloadPath_string"
				},
				"filename": {
					"$ref": "#/definitions/documentFileName_string"
				},
				"key": {
					"$ref": "#/definitions/documentKey_string"
				}
			},
			"title": "Attachment",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowEmailAttachments_array": {
			"description": "The attachments of the email.",
			"items": {
				"$ref": "#/definitions/workflowEmailAttachment_object"
			},
			"title": "Attachments",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowEmailBody_string": {
			"description": "The body of the email.",
			"title": "Body",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailCcRecipient_object": {
			"description": "The CC recipients of the email.",
			"items": {
				"$ref": "#/definitions/workflowEmailCcRecipientEmail_string"
			},
			"title": "CC",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowEmailCcRecipientEmail_string": {
			"description": "The email of the CC recipient.",
			"format": "email",
			"title": "CC Recipient",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailGet_object": {
			"description": "An email thread in the specified workflow.",
			"properties": {
				"attachments": {
					"$ref": "#/definitions/workflowEmailAttachments_array"
				},
				"author": {
					"$ref": "#/definitions/authorGet_object"
				},
				"body": {
					"$ref": "#/definitions/workflowEmailBody_string"
				},
				"cc": {
					"$ref": "#/definitions/workflowEmailCcRecipient_object"
				},
				"emailOpenedTimestamps": {
					"$ref": "#/definitions/workflowEmailStatus_object"
				},
				"id": {
					"$ref": "#/definitions/workflowEmailId_string"
				},
				"recipients": {
					"$ref": "#/definitions/workflowEmailRecipients_array"
				},
				"subject": {
					"$ref": "#/definitions/workflowEmailSubject"
				},
				"timestamp": {
					"$ref": "#/definitions/workflowEmailSentTimestamp"
				},
				"type": {
					"$ref": "#/definitions/workflowEmailType_string"
				}
			},
			"title": "Email Thread",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowEmailId_string": {
			"description": "The unique identifier of the email.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailRecipientEmail_string": {
			"description": "The email of the recipient.",
			"format": "email",
			"title": "Email",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailRecipients_array": {
			"description": "The recipients of the email.",
			"items": {
				"$ref": "#/definitions/workflowEmailRecipientEmail_string"
			},
			"title": "Recipients",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowEmailSentTimestamp": {
			"description": "The date and time the email was sent.",
			"title": "Timestamp",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailsGet_array": {
			"description": "The email threads in the specified workflow.",
			"items": {
				"$ref": "#/definitions/workflowEmailGet_object"
			},
			"title": "Email Threads",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowEmailStatus_object": {
			"description": "Delivery details for this email.",
			"items": {
				"$ref": "#/definitions/workflowEmailStatusRecipient_object"
			},
			"title": "Email Status",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowEmailStatusEmail_string": {
			"description": "The email of the recipient",
			"title": "Email",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailStatusOpened_boolean": {
			"description": "If true, the email was opened.",
			"title": "Opened",
			"type": "boolean",
			"x-ms-visibility": "important"
		},
		"workflowEmailStatusRecipient_object": {
			"description": "A recipient of the email.",
			"properties": {
				"email": {
					"$ref": "#/definitions/workflowEmailStatusEmail_string"
				},
				"opened": {
					"$ref": "#/definitions/workflowEmailStatusOpened_boolean"
				},
				"timestamp": {
					"$ref": "#/definitions/workflowEmailStatusTimestamp_string"
				}
			},
			"title": "Recipient",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowEmailStatusTimestamp_string": {
			"description": "The date and time the email was opened.",
			"format": "date-time",
			"title": "Timestamp",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailSubject": {
			"description": "The subject of the email.",
			"title": "Subject",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowEmailType_string": {
			"description": "The type of the email.",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowFormattedSchema_object": {
			"title": "Formatted Schema",
			"description": "The Ironclad formatted schema of the workflow.",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowParticipantGet_object": {
			"description": "A participant in the workflow.",
			"properties": {
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"userId": {
					"$ref": "#/definitions/userId_string"
				}
			},
			"title": "Participant",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowIroncladId_string": {
			"description": "The Ironclad ID of the workflow.",
			"title": "Ironclad ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowLabel_string": {
			"description": "The display label of the workflow.",
			"title": "Label",
			"type": "string",
			"x-ms-visibility": "advanced"
		},
		"workflowLaunchSchema_object": {
			"title": "Launch Schema",
			"description": "The OpenAPI formatted schema of the workflow.",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowParticipantsGet_object": {
			"properties": {
				"count": {
					"$ref": "#/definitions/count_integer"
				},
				"list": {
					"$ref": "#/definitions/workflowParticipantsListGet_array"
				},
				"page": {
					"$ref": "#/definitions/page_integer"
				},
				"pageSize": {
					"$ref": "#/definitions/pageSize_integer"
				}
			},
			"type": "object"
		},
		"workflowParticipantsListGet_array": {
			"description": "The list of workflow participants.",
			"items": {
				"$ref": "#/definitions/workflowParticipantGet_object"
			},
			"title": "Participants",
			"type": "array"
		},
		"workflowReviewer_object": {
			"description": "A reviewer for this workflow",
			"properties": {
				"displayName": {
					"$ref": "#/definitions/workflowRoleDisplayName_string"
				},
				"reviewerType": {
					"$ref": "#/definitions/workflowReviewerType_string"
				},
				"role": {
					"$ref": "#/definitions/workflowRoleId_string"
				},
				"status": {
					"$ref": "#/definitions/workflowReviewerStatus_string"
				}
			},
			"title": "Reviewer",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowReviewers_array": {
			"description": "The reviewers in this approval group.",
			"items": {
				"$ref": "#/definitions/workflowReviewer_object"
			},
			"title": "Reviewers",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowReviewerStatus_string": {
			"description": "The status of the review task",
			"title": "Status",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowReviewerType_string": {
			"description": "The reviewer type",
			"title": "Type",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowRoleDisplayName_string": {
			"description": "The display name of the role.",
			"title": "Role Name",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowRoleId_string": {
			"description": "The identifier of the role.",
			"title": "ID",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowRoles_array": {
			"description": "The roles in this workflow.",
			"items": {
				"properties": {
					"assignees": {
						"$ref": "#/definitions/assignees_array"
					},
					"displayName": {
						"$ref": "#/definitions/workflowRoleDisplayName_string"
					},
					"id": {
						"$ref": "#/definitions/workflowRoleId_string"
					}
				},
				"type": "object"
			},
			"title": "Roles",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowsApprovalsGet_object": {
			"description": "Approvals for the workflow.",
			"properties": {
				"approvalGroups": {
					"$ref": "#/definitions/workflowApprovalGroup_array"
				},
				"roles": {
					"$ref": "#/definitions/workflowRoles_array"
				},
				"title": {
					"$ref": "#/definitions/workflowTitle_string"
				},
				"workflowId": {
					"$ref": "#/definitions/uniqueId_string"
				}
			},
			"title": "Approvals",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowSchema_object": {
			"description": "A workflow schema.",
			"properties": {
				"documentSchemaAsArray": {
					"$ref": "#/definitions/workflowDocumentSchemaAsArrayGet_array"
				},
				"formattedSchema": {
					"$ref": "#/definitions/workflowFormattedSchema_object"
				},
				"launchSchema": {
					"$ref": "#/definitions/workflowLaunchSchema_object"
				},
				"id": {
					"$ref": "#/definitions/templateId_string"
				},
				"name": {
					"$ref": "#/definitions/templateTitle_string"
				},
				"schema": {
					"$ref": "#/definitions/schemaProperties_object"
				},
				"schemaAsArray": {
					"$ref": "#/definitions/workflowSchemaPropertiesAsArray_array"
				}
			},
			"title": "Workflow Schema",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowSchemaAsArrayGet_array": {
			"description": "The schema of the workflow as an array.",
			"items": {
				"$ref": "#/definitions/workflowSchemaPropertiesAsArrayObject_object"
			},
			"title": "Schemas as Array",
			"type": "array",
			"x-ms-visibility": "advanced"
		},
		"workflowSchemaFromTemplateGet_object": {
			"description": "An Ironclad workflow.",
			"properties": {
				"approvals": {
					"$ref": "#/definitions/workflowApproval_object"
				},
				"attributes": {
					"description": "The attributes of the workflow.",
					"type": "object",
					"x-ms-dynamic-properties": {
						"itemValuePath": "formattedSchema",
						"operationId": "RetrieveWorkflowSchema",
						"parameters": {
							"form": {
								"parameterReference": "form"
							},
							"Schema": {
								"parameterReference": "body/template"
							}
						}
					},
					"x-ms-dynamic-schema": {
						"operationId": "RetrieveWorkflowSchema",
						"parameters": {
							"form": "launch",
							"Schema": {
								"parameter": "template"
							}
						},
						"value-path": "formattedSchema"
					}
				},
				"created": {
					"$ref": "#/definitions/created_string"
				},
				"creator": {
					"$ref": "#/definitions/creatorGet_object"
				},
				"id": {
					"$ref": "#/definitions/uniqueId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/workflowIroncladId_string"
				},
				"isCancelled": {
					"$ref": "#/definitions/isCancelled_boolean"
				},
				"isComplete": {
					"$ref": "#/definitions/isComplete_boolean"
				},
				"isRevertibleToReview": {
					"$ref": "#/definitions/isRevertibleToReview_boolean"
				},
				"lastUpdated": {
					"$ref": "#/definitions/lastUpdated_string"
				},
				"roles": {
					"$ref": "#/definitions/workflowRoles_array"
				},
				"schema": {
					"$ref": "#/definitions/workflowSchemaGet_object"
				},
				"signatures": {
					"$ref": "#/definitions/workflowSignatures_object"
				},
				"status": {
					"$ref": "#/definitions/workflowStatus_string"
				},
				"step": {
					"$ref": "#/definitions/workflowStep_string"
				},
				"template": {
					"$ref": "#/definitions/templateTitle_string"
				},
				"title": {
					"$ref": "#/definitions/workflowTitle_string"
				}
			},
			"title": "Workflow",
			"type": "object"
		},
		"workflowSchemaFromWorkflowGet_object": {
			"description": "An Ironclad workflow.",
			"properties": {
				"approvals": {
					"$ref": "#/definitions/workflowApproval_object"
				},
				"attributes": {
					"$ref": "#/definitions/workflowAttributesGet_object"
				},
				"created": {
					"$ref": "#/definitions/created_string"
				},
				"creator": {
					"$ref": "#/definitions/creatorGet_object"
				},
				"documentsAsArray": {
					"$ref": "#/definitions/workflowDocumentsAsArrayGet_array"
				},
				"formattedAttributes": {
					"description": "The attributes of the workflow.",
					"title": "Formatted Attributes",
					"type": "object",
					"x-ms-dynamic-properties": {
						"itemValuePath": "formattedSchema",
						"operationId": "RetrieveWorkflow",
						"parameters": {
							"Workflow": {
								"parameterReference": "Workflow"
							}
						}
					},
					"x-ms-dynamic-schema": {
						"operationId": "RetrieveWorkflow",
						"parameters": {
							"Workflow": {
								"parameter": "Workflow"
							}
						},
						"value-path": "formattedSchema"
					},
					"x-ms-visibility": "important"
				},
				"formattedSchema": {
					"description": "The formatted schema of the workflow.",
					"title": "Formatted Schema",
					"type": "object",
					"x-ms-visibility": "important"
				},
				"id": {
					"$ref": "#/definitions/uniqueId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/workflowIroncladId_string"
				},
				"isCancelled": {
					"$ref": "#/definitions/isCancelled_boolean"
				},
				"isComplete": {
					"$ref": "#/definitions/isComplete_boolean"
				},
				"isRevertibleToReview": {
					"$ref": "#/definitions/isRevertibleToReview_boolean"
				},
				"lastUpdated": {
					"$ref": "#/definitions/lastUpdated_string"
				},
				"roles": {
					"$ref": "#/definitions/workflowRoles_array"
				},
				"schema": {
					"$ref": "#/definitions/workflowSchemaGet_object"
				},
				"schemaAsArray": {
					"$ref": "#/definitions/workflowSchemaAsArrayGet_array"
				},
				"signatures": {
					"$ref": "#/definitions/workflowSignatures_object"
				},
				"status": {
					"$ref": "#/definitions/workflowStatus_string"
				},
				"step": {
					"$ref": "#/definitions/workflowStep_string"
				},
				"template": {
					"$ref": "#/definitions/templateId_string"
				},
				"title": {
					"$ref": "#/definitions/workflowTitle_string"
				}
			},
			"title": "Workflow",
			"type": "object"
		},
		"workflowSchemaGet_object": {
			"description": "The schema of the workflow.",
			"title": "Workflow Schema",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"workflowSchemaPropertiesAsArray_array": {
			"description": "The schema properties as an Array.",
			"items": {
				"$ref": "#/definitions/workflowSchemaPropertiesAsArrayObject_object"
			},
			"title": "Schema Properties as Array",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowSchemaPropertiesAsArrayObject_object": {
			"description": "A schema property.",
			"properties": {
				"displayName": {
					"$ref": "#/definitions/propertyDisplayName_string"
				},
				"readOnly": {
					"$ref": "#/definitions/propertyReadOnly_boolean"
				},
				"systemName": {
					"$ref": "#/definitions/propertySystemName_string"
				},
				"type": {
					"$ref": "#/definitions/propertyType_string"
				}
			},
			"title": "Schema Property",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowSchemas_array": {
			"description": "The list of workflow schemas",
			"items": {
				"$ref": "#/definitions/workflowSchema_object"
			},
			"title": "Workflow Schemas",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowsGet_array": {
			"description": "A list of Ironclad workflows.",
			"items": {
				"$ref": "#/definitions/workflowStaticGet_object"
			},
			"title": "Workflows",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowSignatures_object": {
			"description": "The signatures state of the workflow.",
			"properties": {
				"state": {
					"$ref": "#/definitions/state_string"
				}
			},
			"title": "Signatures",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowSignatureStatus_object": {
			"description": "The details for this signature.",
			"properties": {
				"isWetSigned": {
					"$ref": "#/definitions/isWetSigned_boolean"
				},
				"status": {
					"$ref": "#/definitions/workflowSignatureStatus_string"
				}
			},
			"title": "Signature",
			"type": "object",
			"x-ms-visibility": "internal"
		},
		"workflowSignatureStatus_string": {
			"description": "The status of the signature.",
			"title": "Status",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowSignedDocuments_object": {
			"description": "If available, the signed documents in the workflow.",
			"properties": {
				"documentVersion": {
					"$ref": "#/definitions/documentVersion_string"
				},
				"download": {
					"$ref": "#/definitions/documentDownloadPath_string"
				},
				"filename": {
					"$ref": "#/definitions/documentFileName_string"
				},
				"key": {
					"$ref": "#/definitions/documentKey_string"
				},
				"lastModified": {
					"$ref": "#/definitions/documentLastModified_object"
				}
			},
			"title": "Signed Document",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowSigner_object": {
			"description": "A signer in this workflow.",
			"properties": {
				"email": {
					"$ref": "#/definitions/userEmail_string"
				},
				"name": {
					"$ref": "#/definitions/userDisplayName_string"
				},
				"roleName": {
					"$ref": "#/definitions/workflowRoleDisplayName_string"
				},
				"routingOrder": {
					"$ref": "#/definitions/routingOrder_integer"
				},
				"signatureStatus": {
					"$ref": "#/definitions/workflowSignatureStatus_object"
				}
			},
			"title": "Signer",
			"type": "object",
			"x-ms-visibility": "important"
		},
		"workflowSigners_array": {
			"description": "The signers in this workflow.",
			"items": {
				"$ref": "#/definitions/workflowSigner_object"
			},
			"title": "Signers",
			"type": "array",
			"x-ms-visibility": "important"
		},
		"workflowStaticGet_object": {
			"description": "An Ironclad workflow.",
			"properties": {
				"approvals": {
					"$ref": "#/definitions/workflowApproval_object"
				},
				"attributes": {
					"$ref": "#/definitions/workflowAttributesGet_object"
				},
				"attributesAsArray": {
					"$ref": "#/definitions/workflowAttributesAsArrayGet_array"
				},
				"created": {
					"$ref": "#/definitions/created_string"
				},
				"creator": {
					"$ref": "#/definitions/creatorGet_object"
				},
				"id": {
					"$ref": "#/definitions/uniqueId_string"
				},
				"ironcladId": {
					"$ref": "#/definitions/workflowIroncladId_string"
				},
				"isCancelled": {
					"$ref": "#/definitions/isCancelled_boolean"
				},
				"isComplete": {
					"$ref": "#/definitions/isComplete_boolean"
				},
				"isRevertibleToReview": {
					"$ref": "#/definitions/isRevertibleToReview_boolean"
				},
				"lastUpdated": {
					"$ref": "#/definitions/lastUpdated_string"
				},
				"roles": {
					"$ref": "#/definitions/workflowRoles_array"
				},
				"schema": {
					"$ref": "#/definitions/workflowSchemaGet_object"
				},
				"schemaAsArray": {
					"$ref": "#/definitions/workflowSchemaAsArrayGet_array"
				},
				"signatures": {
					"$ref": "#/definitions/workflowSignatures_object"
				},
				"status": {
					"$ref": "#/definitions/workflowStatus_string"
				},
				"step": {
					"$ref": "#/definitions/workflowStep_string"
				},
				"template": {
					"$ref": "#/definitions/templateTitle_string"
				},
				"title": {
					"$ref": "#/definitions/workflowTitle_string"
				},
				"label": {
					"$ref": "#/definitions/workflowLabel_string"
				}
			},
			"title": "Workflow",
			"type": "object"
		},
		"workflowStatus_string": {
			"description": "The current status of the workflow.",
			"title": "Workflow Status",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowStep_string": {
			"description": "The current step of the workflow.",
			"title": "Step",
			"type": "string",
			"x-ms-visibility": "important"
		},
		"workflowTitle_string": {
			"description": "The title used for the launched workflow.",
			"title": "Workflow Title",
			"type": "string",
			"x-ms-visibility": "important"
		}
	},
	"parameters": {
		"workflowActionDetails_query": {
			"description": "An optional boolean parameter that adds additional information about the actor to each item in the response. Defaults to false.",
			"in": "query",
			"name": "actorDetails",
			"type": "boolean",
			"x-ms-summary": "Actor Details",
			"x-ms-visibility": "important"
		},
		"workflowAsyncJob_path": {
			"description": "The identifier provided in the response of creating a workflow asynchronously.",
			"in": "path",
			"name": "AsyncJob",
			"required": true,
			"type": "string",
			"x-ms-summary": "Job",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"attachment_formData": {
			"description": "The file to upload.",
			"in": "formData",
			"name": "attachment",
			"required": true,
			"type": "file",
			"x-ms-summary": "Attachment",
			"x-ms-visibility": "important"
		},
		"workflowEmailAttachmentID_path": {
			"description": "The unique identifier of the attachment.",
			"in": "path",
			"name": "Attachment",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveEmailThread",
				"parameters": {
					"Email": {
						"parameter": "Email"
					},
					"Workflow": {
						"parameter": "Workflow"
					}
				},
				"value-collection": "attachments",
				"value-path": "key",
				"value-title": "filename"
			},
			"x-ms-summary": "Attachment",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"workflowCommentID_path": {
			"description": "The unique identifier of a comment.",
			"in": "path",
			"name": "Comment",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListWorkflowComments",
				"parameters": {
					"page": 0,
					"pageSize": 100,
					"Workflow": {
						"parameter": "Workflow"
					}
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "metadata/message"
			},
			"x-ms-summary": "Comment",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"workflowCommentPost_body": {
			"description": "The comment object.",
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"$ref": "#/definitions/commentPost_object"
			},
			"x-ms-visibility": "important"
		},
		"workflowConfiguration_dummy": {
			"description": "Select the configuration of the workflow you would like to update to load available properties or enter them manually by selecting \"Enter custom value\".",
			"name": "configuration",
			"required": true,
			"in": "header",
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListWorkflowSchemas",
				"parameters": {
					"form": "launch"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "name"
			},
			"x-ms-visibility": "important",
			"x-ms-summary": "Configuration"
		},
		"workflowDocumentAttribute_path": {
			"description": "The file attribute.",
			"in": "path",
			"name": "Attribute",
			"required": true,
			"type": "string",
			"x-ms-summary": "Document Attribute",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveWorkflowSchema",
				"parameters": {
					"Schema": {
						"parameter": "configuration"
					},
					"form": "launch"
				},
				"value-collection": "documentSchemaAsArray",
				"value-path": "systemName",
				"value-title": "displayName"
			}
		},
		"workflowDocument_formData": {
			"description": "The document to upload.",
			"in": "formData",
			"name": "attachment",
			"required": true,
			"type": "file",
			"x-ms-summary": "Document",
			"x-ms-visibility": "important"
		},
		"workflowEmailID_path": {
			"description": "The unique identifier of the email.",
			"in": "path",
			"name": "Email",
			"required": true,
			"type": "string",
			"x-ms-summary": "Email",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"recordFilter_query": {
			"description": "Filter records for those that contain (1) the specified property with (2) the specified value. The record property ID should be enclosed in brackets [ ] and the value should be enclosed in single quotes.",
			"in": "query",
			"name": "filter",
			"required": false,
			"type": "string",
			"x-ms-summary": "Filter",
			"x-ms-visibility": "important"
		},
		"workflowForm_query": {
			"default": "launch",
			"description": "The launch form is the only form supported at this time.",
			"enum": [
				"launch"
			],
			"in": "query",
			"name": "form",
			"required": true,
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Launch Form",
					"value": "launch"
				}
			],
			"x-ms-summary": "Form",
			"x-ms-visibility": "important"
		},
		"scimGroupID_path": {
			"description": "The unique identifier of the group.",
			"in": "path",
			"name": "Group",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListGroups",
				"value-collection": "Resources",
				"value-path": "id",
				"value-title": "displayName"
			},
			"x-ms-summary": "Group",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"recordImportId_query": {
			"description": "The ID of the Import for prediction statuses.",
			"in": "query",
			"name": "importId",
			"required": false,
			"type": "string",
			"x-ms-summary": "Import ID",
			"x-ms-visibility": "important"
		},
		"json_header": {
			"default": "application/json",
			"in": "header",
			"name": "Accept",
			"required": true,
			"type": "string",
			"x-ms-visibility": "internal"
		},
		"workflowLastUpdated_query": {
			"description": "Get workflows updated since (UTC).",
			"in": "query",
			"name": "lastUpdated",
			"required": false,
			"type": "string",
			"x-ms-summary": "Last Updated",
			"x-ms-visibility": "important"
		},
		"recordLastUpdated_query": {
			"description": "Get records updated since (UTC).",
			"in": "query",
			"name": "lastUpdated",
			"required": false,
			"type": "string",
			"x-ms-summary": "Last Updated",
			"x-ms-visibility": "important"
		},
		"recordNewRecordTypeDisplayName_formData": {
			"description": "The display name of the new record type to create.",
			"in": "formData",
			"name": "newRecordTypeDisplayName",
			"required": false,
			"type": "string",
			"x-ms-summary": "New Record Type Display Name",
			"x-ms-visibility": "important"
		},
		"recordNewRecordTypeId_formData": {
			"description": "The record type ID for a not-yet-existing record type. Must be provided along with New Record Type Display Name.",
			"in": "formData",
			"name": "newRecordTypeId",
			"required": false,
			"type": "string",
			"x-ms-summary": "New Record Type ID",
			"x-ms-visibility": "important"
		},
		"page_query": {
			"default": 0,
			"description": "The page number used when paginating through a list of results.",
			"in": "query",
			"name": "page",
			"required": true,
			"type": "integer",
			"x-ms-summary": "Page",
			"x-ms-visibility": "important"
		},
		"pageSize_query": {
			"default": 100,
			"description": "A limit of the number of results to return.",
			"in": "query",
			"name": "pageSize",
			"required": true,
			"type": "integer",
			"x-ms-summary": "Page Size",
			"x-ms-visibility": "important"
		},
		"recordExportProperties_query": {
			"name": "properties",
			"in": "query",
			"description": "A comma separated list of properties, clauses and attachments to include in the retrieved records.",
			"required": false,
			"type": "string",
			"x-ms-summary": "Record Properties",
			"x-ms-visibility": "important"
		},
		"recordProperties_query": {
			"name": "recordPorperties",
			"in": "query",
			"description": "A comma separated list of properties, clauses and attachments to include in the retrieved records.",
			"required": false,
			"type": "string",
			"x-ms-summary": "Record Properties",
			"x-ms-visibility": "important"
		},
		"recordDocumentKeyFromSchema_path": {
			"description": "The unique identifier for the attachment. This key can be located using the Retrieve a workflow endpoint. In the response, locate the file attribute (e.g., draft) and look at its download parameter. The download parameter includes the key at the end of the URL .../document/{ATTACHMENT_KEY}/download.",
			"in": "path",
			"name": "Key",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveRecordSchemas",
				"parameters": {

				},
				"value-collection": "formattedAttachments",
				"value-path": "systemName",
				"value-title": "displayName"
			},
			"x-ms-summary": "Key",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"recordId_path": {
			"description": "The ID or Ironclad ID of the Record.",
			"in": "path",
			"name": "Record",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListAllRecords",
				"parameters": {
					"page": 0,
					"pageSize": 100,
					"sortDirection": "DESC",
					"sortField": "lastUpdated"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "label"
			},
			"x-ms-summary": "Record",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"recordId_query": {
			"description": "The ID of the Record for prediction status.",
			"in": "query",
			"name": "recordId",
			"required": false,
			"type": "string",
			"x-ms-summary": "Record ID",
			"x-ms-visibility": "important"
		},
		"recordPatch_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"name": {
						"$ref": "#/definitions/recordName_string"
					},
					"type": {
						"$ref": "#/definitions/recordTypePost_string"
					},
					"addProperties": {
						"$ref": "#/definitions/recordPropertiesToAddAsArrayPost_array"
					},
					"removeProperties": {
						"$ref": "#/definitions/recordRemoveProperties_array"
					},
					"addChildren": {
						"$ref": "#/definitions/recordAddChildren_array"
					},
					"addLinks": {
						"$ref": "#/definitions/recordAddLinks_array"
					},
					"removeChildren": {
						"$ref": "#/definitions/recordRemoveChildren_array"
					},
					"removeLinks": {
						"$ref": "#/definitions/recordRemoveLinks_array"
					},
					"removeParent": {
						"$ref": "#/definitions/recordRemoveParent_boolean"
					},
					"setParent": {
						"$ref": "#/definitions/recordSetParent_object"
					}
				},
				"type": "object"
			},
			"x-ms-visibility": "important"
		},
		"recordPost_body": {
			"in": "body",
			"name": "body",
			"required": false,
			"schema": {
				"$ref": "#/definitions/recordPost_object"
			},
			"x-ms-visibility": "important"
		},
		"recordType_formData": {
			"description": "Upload a smart import record as an existing record type.",
			"in": "formData",
			"name": "recordType",
			"required": false,
			"type": "string",
			"x-ms-summary": "Record Type",
			"x-ms-visibility": "important",
			"x-ms-dynamic-values": {
				"operationId": "RetrieveRecordSchemas",
				"value-collection": "formattedRecordTypes",
				"value-path": "systemName",
				"value-title": "displayName"
			}
		},
		"recordTypes_query": {
			"description": "Comma separated list of record types to export. Example: mutualNDA,NDA",
			"in": "query",
			"name": "types",
			"required": false,
			"type": "string",
			"x-ms-summary": "Types"
		},
		"representation_header": {
			"default": "return=representation",
			"in": "header",
			"name": "Prefer",
			"required": true,
			"type": "string",
			"x-ms-visibility": "internal"
		},
		"returnRepresentation_header": {
			"default": "return=representation",
			"in": "header",
			"name": "Prefer",
			"required": true,
			"type": "string",
			"x-ms-visibility": "internal"
		},
		"workflowRevertingUser_body": {
			"description": "The Ironclad user reverting the workflow to the Review step. The user must be a participant on the workflow.",
			"in": "body",
			"name": "user",
			"required": true,
			"schema": {
				"$ref": "#/definitions/userPost_object"
			},
			"x-ms-summary": "Reverting User",
			"x-ms-visibility": "important"
		},
		"workflowRoleID_path": {
			"description": "The unique identifier of the approver role whose status should be changed.",
			"in": "path",
			"name": "Role",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListWorkflowApprovals",
				"parameters": {
					"Workflow": {
						"parameter": "Workflow"
					}
				},
				"value-collection": "roles",
				"value-path": "id",
				"value-title": "displayName"
			},
			"x-ms-summary": "Role",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"workflowSchemaID_path": {
			"description": "The identifier of the workflow template.",
			"in": "path",
			"name": "Schema",
			"required": true,
			"type": "string",
			"x-ms-dynamic-list": {
				"itemsPath": "list",
				"itemTitlePath": "name",
				"itemValuePath": "id",
				"operationId": "ListWorkflowSchemas",
				"parameters": {
					"form": {
						"parameterReference": "form"
					}
				}
			},
			"x-ms-dynamic-values": {
				"operationId": "ListWorkflowSchemas",
				"parameters": {
					"form": "launch"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "name"
			},
			"x-ms-summary": "Ironclad Workflow Template",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"scimCount_query": {
			"description": "The number of resources returned in a list response page. Defaults to 25.",
			"in": "query",
			"name": "count",
			"required": false,
			"type": "integer",
			"x-ms-summary": "Count",
			"x-ms-visibility": "important"
		},
		"scimExcludedAttributes_query": {
			"description": "A comma-separated list of attributes to exclude from the resources in the response.",
			"in": "query",
			"name": "excludedAttributes",
			"required": false,
			"type": "string",
			"x-ms-summary": "Excluded Attributes",
			"x-ms-visibility": "important"
		},
		"scimRecordFilter_query": {
			"description": "Filters for identifying subsets of records. Filters must comply with the SCIM protocol's convention.",
			"in": "query",
			"name": "filter",
			"required": false,
			"type": "string",
			"x-ms-summary": "Filter",
			"x-ms-visibility": "important"
		},
		"scimGroup_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"displayName": {
						"$ref": "#/definitions/scimGroupDisplayName_string"
					},
					"externalId": {
						"$ref": "#/definitions/groupExternalId_string"
					},
					"members": {
						"$ref": "#/definitions/scimGroupMembersPost_array"
					},
					"schemas": {
						"$ref": "#/definitions/scimGroupSchemasPost_array"
					}
				},
				"required": [
					"displayName",
					"schemas"
				],
				"type": "object"
			}
		},
		"scimGroupOperations_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"Operations": {
						"$ref": "#/definitions/scimGroupOperations_array"
					},
					"schemas": {
						"$ref": "#/definitions/scimPatchOpSchemasPost_array"
					}
				},
				"required": [
					"schemas",
					"Operations"
				],
				"type": "object"
			}
		},
		"scimStartIndex_query": {
			"description": "The starting index for retrieving this resource. Resources are indexed based on when they were first added to Ironclad. Defaults to 1.",
			"in": "query",
			"name": "startIndex",
			"required": false,
			"type": "integer",
			"x-ms-summary": "Start Index",
			"x-ms-visibility": "important"
		},
		"scimUser_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"name": {
						"$ref": "#/definitions/scimName_object"
					},
					"password": {
						"$ref": "#/definitions/scimPassword_string"
					},
					"schemas": {
						"$ref": "#/definitions/scimUserSchemasPost_array"
					},
					"title": {
						"$ref": "#/definitions/scimTitle_string"
					},
					"userName": {
						"$ref": "#/definitions/username_string"
					}
				},
				"required": [
					"schemas",
					"userName",
					"name",
					"password"
				],
				"type": "object"
			}
		},
		"scimUserOperations_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"Operations": {
						"$ref": "#/definitions/scimUserOperations_array"
					},
					"schemas": {
						"$ref": "#/definitions/scimPatchOpSchemasPost_array"
					}
				},
				"required": [
					"schemas",
					"Operations"
				],
				"type": "object"
			}
		},
		"recordSmartImport_path": {
			"description": "The Import Id. You can upload a record to an existing import in the repository.",
			"in": "path",
			"name": "Import",
			"required": true,
			"type": "string",
			"x-ms-summary": "Smart Import",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"sortDirection_query": {
			"default": "DESC",
			"description": "The direction the results are sorted by in correlation with the sortField.",
			"enum": [
				"DESC",
				"ASC"
			],
			"in": "query",
			"name": "sortDirection",
			"required": true,
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "descending",
					"value": "DESC"
				},
				{
					"displayName": "ascending",
					"value": "ASC"
				}
			],
			"x-ms-summary": "Sort Direction",
			"x-ms-visibility": "important"
		},
		"sortField_query": {
			"default": "lastUpdated",
			"description": "The field to sort the results by. Only one field is supported in the sort operation.",
			"enum": [
				"lastUpdated",
				"agreementDate",
				"name"
			],
			"in": "query",
			"name": "sortField",
			"required": true,
			"type": "string",
			"x-ms-enum-values": [
				{
					"displayName": "Last Updated",
					"value": "lastUpdated"
				},
				{
					"displayName": "Agreement Date",
					"value": "agreementDate"
				},
				{
					"displayName": "Name",
					"value": "name"
				}
			],
			"x-ms-summary": "Sort Field",
			"x-ms-visibility": "important"
		},
		"workflowUserEmail_query": {
			"description": "The Ironclad user's email address you want to filter by.",
			"in": "query",
			"name": "email",
			"required": false,
			"type": "string",
			"x-ms-summary": "Email",
			"x-ms-visibility": "important"
		},
		"scimUserID_path": {
			"description": "The unique identifier of the user.",
			"in": "path",
			"name": "User",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListUsers",
				"value-collection": "Resources",
				"value-path": "id",
				"value-title": "username"
			},
			"x-ms-summary": "User",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"webhookBody_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"events": {
						"$ref": "#/definitions/webhookEvents_array"
					},
					"targetURL": {
						"$ref": "#/definitions/webhookTargetUrlGet_string"
					}
				},
				"required": [
					"targetURL",
					"events"
				],
				"type": "object",
				"x-ms-visibility": "important"
			},
			"x-ms-visibility": "important"
		},
		"webhookID_path": {
			"description": "The identifier of the registered webhook.",
			"in": "path",
			"name": "Webhook",
			"required": true,
			"type": "string",
			"x-ms-summary": "Webhook ID",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"workflow_body": {
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"properties": {
					"attributes": {
						"description": "The attributes of the workflow.",
						"type": "object",
						"x-ms-dynamic-properties": {
							"itemValuePath": "launchSchema",
							"operationId": "RetrieveWorkflowSchema",
							"parameters": {
								"form": {
									"parameterReference": "form"
								},
								"Schema": {
									"parameterReference": "body/template"
								}
							}
						},
						"x-ms-dynamic-schema": {
							"operationId": "RetrieveWorkflowSchema",
							"parameters": {
								"form": "launch",
								"Schema": {
									"parameter": "template"
								}
							},
							"value-path": "launchSchema"
						}
					},
					"creator": {
						"$ref": "#/definitions/creatorPost_object"
					},
					"template": {
						"description": "The identifier of the workflow template.",
						"title": "Template",
						"type": "string",
						"x-ms-dynamic-list": {
							"itemsPath": "list",
							"itemTitlePath": "name",
							"itemValuePath": "id",
							"operationId": "ListWorkflowSchemas",
							"parameters": {
								"form": {
									"parameterReference": "form"
								}
							}
						},
						"x-ms-dynamic-values": {
							"operationId": "ListWorkflowSchemas",
							"parameters": {
								"form": "launch"
							},
							"value-collection": "list",
							"value-path": "id",
							"value-title": "name"
						},
						"x-ms-summary": "Template",
						"x-ms-visibility": "important"
					}
				},
				"required": [
					"creator",
					"template",
					"attributes"
				],
				"type": "object"
			}
		},
		"workflowUpdateActions_body": {
			"description": "The actions to take on the workflow attributes.",
			"in": "body",
			"name": "body",
			"required": true,
			"schema": {
				"$ref": "#/definitions/workflowAttributeActions_object"
			},
			"x-ms-visibility": "important"
		},
		"workflowDocumentKey_path": {
			"description": "The unique identifier for the attachment. This key can be located using the Retrieve a workflow endpoint. In the response, locate the file attribute (e.g., draft) and look at its download parameter. The download parameter includes the key at the end of the URL .../document/{ATTACHMENT_KEY}/download.",
			"in": "path",
			"name": "Key",
			"required": true,
			"type": "string",
			"x-ms-summary": "Document Key",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"workflowId_path": {
			"description": "The identifier or Ironclad ID of a workflow.",
			"in": "path",
			"name": "Workflow",
			"required": true,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListAllWorkflows",
				"parameters": {
					"page": 0,
					"pageSize": 100,
					"sortDirection": "DESC",
					"sortField": "lastUpdated"
				},
				"value-collection": "list",
				"value-path": "id",
				"value-title": "label"
			},
			"x-ms-summary": "Workflow",
			"x-ms-url-encoding": "single",
			"x-ms-visibility": "important"
		},
		"workflowStatus_query": {
			"description": "The status of the workflow.",
			"enum": [
				"active",
				"paused",
				"completed",
				"cancelled"
			],
			"in": "query",
			"name": "status",
			"required": false,
			"type": "string",
			"x-ms-summary": "Workflow Status",
			"x-ms-visibility": "important"
		},
		"workflowTemplateID_query": {
			"description": "The identifier of the workflow template.",
			"in": "query",
			"name": "template",
			"required": false,
			"type": "string",
			"x-ms-summary": "Template ID",
			"x-ms-visibility": "important",
			"x-ms-dynamic-list": {
				"itemsPath": "list",
				"itemTitlePath": "name",
				"itemValuePath": "id",
				"operationId": "ListWorkflowSchemas",
				"parameters": {
					"form": {
						"value": "launchForm"
					}
				}
			}
		},
		"x-as-user-email_header": {
			"description": "Denotes the actor of the request. When used, the API will take into account this user's permissions and access. This or x-as-user-id is required when the associated token was produced from the Client Credentials grant or with legacy bearer tokens on select endpoints.",
			"in": "header",
			"name": "x-as-user-email",
			"required": false,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListUsers",
				"parameters": {
					"count": 100,
					"startIndex": 1
				},
				"value-collection": "Resources",
				"value-path": "username",
				"value-title": "combinedLabel"
			},
			"x-ms-summary": "Actor Email Address",
			"x-ms-visibility": "advanced"
		},
		"x-as-user-id_header": {
			"description": "Denotes the actor of the request. When used, the API will take into account this user's permissions and access. This or x-as-user-email is required when the associated token was produced from the Client Credentials grant or with legacy bearer tokens on select endpoints.",
			"in": "header",
			"name": "x-as-id-email",
			"required": false,
			"type": "string",
			"x-ms-dynamic-values": {
				"operationId": "ListUsers",
				"parameters": {
					"count": 100,
					"startIndex": 1
				},
				"value-collection": "Resources",
				"value-path": "id",
				"value-title": "combinedLabel"
			},
			"x-ms-summary": "Actor ID",
			"x-ms-visibility": "advanced"
		}
	},
	"responses": {

	},
	"security": [

	],
	"securityDefinitions": {

	},
	"tags": [

	]
}
